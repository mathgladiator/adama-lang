/*
* Adama Platform and Language
* Copyright (C) 2021 - 2023 by Adama Platform Initiative, LLC
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package org.adamalang.translator;

import org.junit.Test;

public class GeneratedDemoInstrumentedTests extends GeneratedBase {
  private String cached_GameHearts_1 = null;
  private String get_GameHearts_1() {
    if (cached_GameHearts_1 != null) {
      return cached_GameHearts_1;
    }
    cached_GameHearts_1 = generateTestOutput(true, "GameHearts_1", "./test_code/DemoInstrumented_GameHearts_success.a");
    return cached_GameHearts_1;
  }

  @Test
  public void testGameHeartsEmission() {
    assertEmissionGood(get_GameHearts_1());
  }

  @Test
  public void testGameHeartsSuccess() {
    assertLivePass(get_GameHearts_1());
  }

  @Test
  public void testGameHeartsNoFormatException() {
    assertNoFormatException(get_GameHearts_1());
  }

  @Test
  public void testGameHeartsGoodWillHappy() {
    assertGoodWillHappy(get_GameHearts_1());
  }

  @Test
  public void testGameHeartsExceptionFree() {
    assertExceptionFree(get_GameHearts_1());
  }

  @Test
  public void testGameHeartsTODOFree() {
    assertTODOFree(get_GameHearts_1());
  }

  @Test
  public void stable_GameHearts_1() {
    String live = get_GameHearts_1();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:DemoInstrumented_GameHearts_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n=FORMAT===================================================");
    gold.append("\n// we define the suit of a card");
    gold.append("\nenum Suit {");
    gold.append("\n  Clubs:1,");
    gold.append("\n");
    gold.append("\n  Hearts:2,");
    gold.append("\n");
    gold.append("\n  Spades:3,");
    gold.append("\n");
    gold.append("\n  Diamonds:4,");
    gold.append("\n");
    gold.append("\n} // the rank of a card");
    gold.append("\n");
    gold.append("\nenum Rank {");
    gold.append("\n  Two:2,");
    gold.append("\n");
    gold.append("\n  Three:3,");
    gold.append("\n");
    gold.append("\n  Four:4,");
    gold.append("\n");
    gold.append("\n  Five:5,");
    gold.append("\n");
    gold.append("\n  Six:6,");
    gold.append("\n");
    gold.append("\n  Seven:7,");
    gold.append("\n");
    gold.append("\n  Eight:8,");
    gold.append("\n");
    gold.append("\n  Nine:9,");
    gold.append("\n");
    gold.append("\n  Ten:10,");
    gold.append("\n");
    gold.append("\n  Jack:11,");
    gold.append("\n");
    gold.append("\n  Queen:12,");
    gold.append("\n");
    gold.append("\n  King:13,");
    gold.append("\n");
    gold.append("\n  Ace:14,");
    gold.append("\n");
    gold.append("\n} // where can a card be");
    gold.append("\n");
    gold.append("\nenum Place {");
    gold.append("\n  Deck:1,");
    gold.append("\n");
    gold.append("\n  Hand:2,");
    gold.append("\n");
    gold.append("\n  InPlay:3,");
    gold.append("\n");
    gold.append("\n  Taken:4");
    gold.append("\n} // model the card and its location and ownership");
    gold.append("\n");
    gold.append("\nrecord Card {");
    gold.append("\n  public int id;");
    gold.append("\n  public Suit suit;");
    gold.append("\n  public Rank rank;");
    gold.append("\n  private principal owner;");
    gold.append("\n  private int ordering;");
    gold.append("\n  private Place place;");
    gold.append("\n  private auto points = suit == Suit::Hearts ? 1 : (suit == Suit::Spades && rank==Rank::Queen ? 13 : 0);// define a policy as to who can see the card");
    gold.append("\n");
    gold.append("\n  policy p { // if it is in hand on in the pot, then only the owner of the card can see it");
    gold.append("\n // the rules of hearts have cards face down");
    gold.append("\n");
    gold.append("\n    if (place == Place::Hand || place == Place::Taken) {");
    gold.append("\n      return @who == owner;");
    gold.append("\n    }// if it is in the pot or in play, then anyone can see it");
    gold.append("\n");
    gold.append("\n    if (place==Place::InPlay) {");
    gold.append("\n      return true;");
    gold.append("\n    }// otherwise, it is in the deck and thus not visible");
    gold.append("\n");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  require p;");
    gold.append("\n} // the entire deck of cards");
    gold.append("\n");
    gold.append("\ntable<Card> deck;// show the player hand (and let the privacy policy filter out by person)");
    gold.append("\n");
    gold.append("\npublic auto hand = iterate deck where place == Place::Hand;// show all cards in the pot (this would be a different way of defining hand)");
    gold.append("\n");
    gold.append("\nbubble my_take = iterate deck where place == Place::Taken && owner == @who;// no real constructor");
    gold.append("\n");
    gold.append("\nmessage Empty {");
    gold.append("\n}");
    gold.append("\nprincipal owner;");
    gold.append("\nrecord Player {");
    gold.append("\n  public int id;");
    gold.append("\n  public principal link;");
    gold.append("\n  private bool playing;");
    gold.append("\n  public int points;");
    gold.append("\n  viewer_is<link> bool leader;");
    gold.append("\n  viewer_is<link> int play_order;// sort out why this doesn't work");
    gold.append("\n// viewer_is<link> auto hand = iterate deck where owner == link;");
    gold.append("\n");
    gold.append("\n}");
    gold.append("\ntable<Player> players;");
    gold.append("\n@connected { // the first connection assumes a leadership position as the owner of the table/game");
    gold.append("\n");
    gold.append("\n  if (owner == @no_one) {");
    gold.append("\n    owner = @who;");
    gold.append("\n    players <- {");
    gold.append("\n        link:@who,");
    gold.append("\n        playing:true,");
    gold.append("\n        leader:true,");
    gold.append("\n        play_order:0,");
    gold.append("\n        points:0");
    gold.append("\n      };");
    gold.append("\n    transition #lobby;");
    gold.append("\n  }// the owner is always allowed");
    gold.append("\n");
    gold.append("\n  if (owner == @who) {");
    gold.append("\n    return true;");
    gold.append("\n  }// add the player if they are not already in the game");
    gold.append("\n");
    gold.append("\n  if ( (iterate players where link==@who).size() == 0) {");
    gold.append("\n    players <- {");
    gold.append("\n        link:@who,");
    gold.append("\n        playing:false,");
    gold.append("\n        leader:false,");
    gold.append("\n        play_order: players.size(),");
    gold.append("\n        points:0");
    gold.append("\n      };");
    gold.append("\n  }");
    gold.append("\n  return true;");
    gold.append("\n}");
    gold.append("\n@disconnected { // remove the player if they are not playing");
    gold.append("\n");
    gold.append("\n  (iterate players where link==@who && !playing).delete();");
    gold.append("\n} // how many people are connected");
    gold.append("\n");
    gold.append("\npublic auto players_connected = (iterate players where playing).size();// how many observers");
    gold.append("\n");
    gold.append("\npublic auto observers_connected = (iterate players where !playing).size();// everyone in the game");
    gold.append("\n");
    gold.append("\npublic auto people = iterate players order by play_order;// the players by their ordering");
    gold.append("\n");
    gold.append("\npublic auto players_ordered = iterate players where playing order by play_order;// the client logic for who is what is going to be... interesting");
    gold.append("\n// whether or not the game is ready to begin");
    gold.append("\n");
    gold.append("\npublic auto ready = players_connected == 4;// are we actually playing the game?");
    gold.append("\n");
    gold.append("\npublic bool playing = false;// we are waiting for an owner to arrive which will transition us into the lobby");
    gold.append("\n// the lobby allows the leader to send messages of the following form");
    gold.append("\n");
    gold.append("\nenum LeaderAction {");
    gold.append("\n  PromoteObserver:1,");
    gold.append("\n");
    gold.append("\n  DemotePlayer:2,");
    gold.append("\n");
    gold.append("\n  ShufflePlayers:3,");
    gold.append("\n");
    gold.append("\n  // BumpOrderUp:4, BumpOrderDown:5");
    gold.append("\n");
    gold.append("\n  Begin:10");
    gold.append("\n} // the purpose of this action is to convert observers into players, and to arrange the players.");
    gold.append("\n // the action is wrapped in a message");
    gold.append("\n");
    gold.append("\nmessage LeaderActionMessage {");
    gold.append("\n  LeaderAction action;");
    gold.append("\n  int id;");
    gold.append("\n} // and the message is used as a channel which yields futures");
    gold.append("\n");
    gold.append("\nchannel<LeaderActionMessage> leader;// the lobby is where leader will marshall the people");
    gold.append("\n");
    gold.append("\n#lobby { // ask the leader to do something");
    gold.append("\n");
    gold.append("\n  LeaderActionMessage decision = leader.fetch(owner).await();");
    gold.append("\n  if (decision.action == LeaderAction::PromoteObserver && !ready) { // leader promoted an observer to");
    gold.append("\n");
    gold.append("\n    (iterate players where id==decision.id).playing = true;");
    gold.append("\n  }else if (decision.action == LeaderAction::DemotePlayer) { // leader demotes a player to an observer");
    gold.append("\n");
    gold.append("\n    (iterate players where id==decision.id).playing = false;");
    gold.append("\n  }else if (decision.action == LeaderAction::ShufflePlayers) {");
    gold.append("\n    (iterate players where playing).play_order = Random.genInt();");
    gold.append("\n  }else if (decision.action == LeaderAction::Begin) { // leader has selected people, and will now begin the game");
    gold.append("\n");
    gold.append("\n    playing = true;");
    gold.append("\n    if ( (iterate players where playing).size() == 4) {");
    gold.append("\n      transition #setup;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  transition #lobby;");
    gold.append("\n} // how setup the game state");
    gold.append("\n");
    gold.append("\n#setup { // build the deck");
    gold.append("\n");
    gold.append("\n  foreach (s in Suit::*) {");
    gold.append("\n    foreach (r in Rank::*) {");
    gold.append("\n      deck <- {");
    gold.append("\n          rank:r,");
    gold.append("\n          suit:s,");
    gold.append("\n          place:Place::Deck");
    gold.append("\n        };");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n  } // normalize observers to no play order");
    gold.append("\n");
    gold.append("\n");
    gold.append("\n  (iterate players where !playing).play_order = 100;// normalize the players from 0 to 3");
    gold.append("\n");
    gold.append("\n  int normativeOrder = 0;");
    gold.append("\n  (iterate players where playing order by play_order asc).play_order = normativeOrder++;// shuffle and distribute the cards");
    gold.append("\n");
    gold.append("\n  transition #shuffle_and_distribute;");
    gold.append("\n}");
    gold.append("\nenum PassingMode {");
    gold.append("\n  Across:0,");
    gold.append("\n  ToLeft:1,");
    gold.append("\n  ToRight:2,");
    gold.append("\n  None:3");
    gold.append("\n}");
    gold.append("\npublic PassingMode passing_mode;");
    gold.append("\n#shuffle_and_distribute { // it may be useful to allow methods on a record, fuck");
    gold.append("\n");
    gold.append("\n  (iterate deck).ordering = Random.genInt();");
    gold.append("\n  (iterate deck).owner = @no_one;");
    gold.append("\n  (iterate deck).place = Place::Hand;// distribute cards to players");
    gold.append("\n");
    gold.append("\n  Player[] op = (iterate players where playing order by play_order).toArray();");
    gold.append("\n  for (int k = 0;k < 4;k++) {");
    gold.append("\n    if (op[k] as player) {");
    gold.append("\n      (iterate deck where owner == @no_one order by ordering limit 13).owner = player.link;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n");
    gold.append("\n  transition #pass;");
    gold.append("\n}");
    gold.append("\nmessage CardDecision {");
    gold.append("\n  int id;");
    gold.append("\n}");
    gold.append("\nchannel<CardDecision[]> pass_channel;// this is wanky, need arrays at a top level that are finite to help...");
    gold.append("\n");
    gold.append("\nprincipal player1;");
    gold.append("\nprincipal player2;");
    gold.append("\nprincipal player3;");
    gold.append("\nprincipal player4;");
    gold.append("\nprincipal current;");
    gold.append("\n#pass {");
    gold.append("\n  if (passing_mode == PassingMode::None) {");
    gold.append("\n    transition #start_play;");
    gold.append("\n  }// this is wanky as fuck, and I don't like it. We have this fundamental problem of what if there are not enough players, then how does this fail...");
    gold.append("\n// we should consider a @fatal keyword to signal that a game is just fucked");
    gold.append("\n");
    gold.append("\n  Player[] op = (iterate players where playing order by play_order).toArray();");
    gold.append("\n  if (op[0] as player) {");
    gold.append("\n    player1 = player.link;");
    gold.append("\n  }");
    gold.append("\n  if (op[1] as player) {");
    gold.append("\n    player2 = player.link;");
    gold.append("\n  }");
    gold.append("\n  if (op[2] as player) {");
    gold.append("\n    player3 = player.link;");
    gold.append("\n  }");
    gold.append("\n  if (op[3] as player) {");
    gold.append("\n    player4 = player.link;");
    gold.append("\n  }// what does an await on no_one mean, it means the whole thing is fucked");
    gold.append("\n// we really need a future array since this has some awkward stuff");
    gold.append("\n");
    gold.append("\n  future<maybe<CardDecision[]>> pass1 = pass_channel.choose(player1, @convert<CardDecision>(iterate deck where owner==player1), 3);");
    gold.append("\n  future<maybe<CardDecision[]>> pass2 = pass_channel.choose(player2, @convert<CardDecision>(iterate deck where owner==player2), 3);");
    gold.append("\n  future<maybe<CardDecision[]>> pass3 = pass_channel.choose(player3, @convert<CardDecision>(iterate deck where owner==player3), 3);");
    gold.append("\n  future<maybe<CardDecision[]>> pass4 = pass_channel.choose(player4, @convert<CardDecision>(iterate deck where owner==player4), 3);// the reason we do the futures above and then await them below like this is so all players can pass at the same time.");
    gold.append("\n// the problem at hand is that the await will consume, so non-awaited futures will cause the client to sit dumbly... this can be fixed easily I think");
    gold.append("\n// by having the make_future<> check the stream and pre-drain the queue and allow the await to short-circuit with the provide option");
    gold.append("\n");
    gold.append("\n  if (pass1.await() as decision1) {");
    gold.append("\n    if (pass2.await() as decision2) {");
    gold.append("\n      if (pass3.await() as decision3) {");
    gold.append("\n        if (pass4.await() as decision4) {");
    gold.append("\n          if (passing_mode == PassingMode::ToRight) {");
    gold.append("\n            foreach (dec in decision1) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player2;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision2) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player3;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision3) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player4;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision4) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player1;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n          }else if (passing_mode == PassingMode::ToLeft) {");
    gold.append("\n            foreach (dec in decision1) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player4;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision2) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player1;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision3) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player2;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision4) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player3;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n          }else if (passing_mode == PassingMode::Across) {");
    gold.append("\n            foreach (dec in decision1) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player3;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision2) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player4;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision3) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player1;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n            foreach (dec in decision4) {");
    gold.append("\n              (iterate deck where id == dec.id).owner = player2;");
    gold.append("\n            }");
    gold.append("\n");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  transition #start_play;");
    gold.append("\n}");
    gold.append("\npublic int played = 0;");
    gold.append("\n#start_play { // no cards hae been played");
    gold.append("\n");
    gold.append("\n  played = 0;// assign a player to current");
    gold.append("\n");
    gold.append("\n  current = player1;");
    gold.append("\n  if ( (iterate deck where rank == Rank::Two && suit == Suit::Clubs)[0] as two_clubs) {");
    gold.append("\n    current = two_clubs.owner;");
    gold.append("\n  }// otherwise, @fatal");
    gold.append("\n");
    gold.append("\n  transition #play;");
    gold.append("\n}");
    gold.append("\nchannel<CardDecision[]> single_play;");
    gold.append("\npublic Suit suit_in_play;");
    gold.append("\npublic bool points_played = false;");
    gold.append("\npublic auto in_play = iterate deck where place == Place::InPlay order by rank desc;// how to attribute this to a person");
    gold.append("\n");
    gold.append("\npublic principal last_winner;");
    gold.append("\n#play {");
    gold.append("\n  list<Card> choices = iterate deck where owner==current && place == Place::Hand && ( played == 0 && (points_played || points == 0) || played > 0 && suit_in_play == suit );");
    gold.append("\n  if (choices.size() == 0) {");
    gold.append("\n    choices = iterate deck where owner==current && place == Place::Hand;");
    gold.append("\n  }");
    gold.append("\n  future<maybe<CardDecision[]>> playX = single_play.choose(current, @convert<CardDecision>(choices), 1);");
    gold.append("\n  if (playX.await() as thePlay) { // : don't think hearts can be played, there are some rules here");
    gold.append("\n");
    gold.append("\n    foreach (dec in thePlay) {");
    gold.append("\n      (iterate deck where id == dec.id).place = Place::InPlay;");
    gold.append("\n      if ( (iterate deck where id == dec.id)[0] as cardPlayed) { //");
    gold.append("\n//   cardPlayed.place = Place::InPlay;");
    gold.append("\n// this doesn't work");
    gold.append("\n // points are open");
    gold.append("\n");
    gold.append("\n        if (cardPlayed.points > 0) {");
    gold.append("\n          points_played = true;");
    gold.append("\n        }");
    gold.append("\n        if (played == 0) {");
    gold.append("\n          suit_in_play = cardPlayed.suit;");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n  }// if the number of cards played is less than 4, then next player; otherwise, decide winner of pot and award points");
    gold.append("\n// : need finite arrays and cyclic integers");
    gold.append("\n");
    gold.append("\n  if (current == player1) {");
    gold.append("\n    current = player2;");
    gold.append("\n  }else if (current == player2) {");
    gold.append("\n    current = player3;");
    gold.append("\n  }else if (current == player3) {");
    gold.append("\n    current = player4;");
    gold.append("\n  }else if (current == player4) {");
    gold.append("\n    current = player1;");
    gold.append("\n  }");
    gold.append("\n  if (played == 3) { // : figure this out (why can't I limit and then)");
    gold.append("\n");
    gold.append("\n    if ( (iterate deck where place == Place::InPlay && suit == suit_in_play order by rank desc)[0] as winner) {");
    gold.append("\n      (iterate deck where place == Place::InPlay).owner = winner.owner;");
    gold.append("\n      last_winner = winner.owner;");
    gold.append("\n    }");
    gold.append("\n    (iterate deck where place == Place::InPlay).place = Place::Taken;");
    gold.append("\n    played = 0;");
    gold.append("\n    current = last_winner;");
    gold.append("\n    if( (iterate deck where owner == current && place == Place::Hand).size() == 0) {");
    gold.append("\n      transition #score;");
    gold.append("\n    }");
    gold.append("\n  }else {");
    gold.append("\n    played++;");
    gold.append("\n  }");
    gold.append("\n");
    gold.append("\n  transition #play;");
    gold.append("\n}");
    gold.append("\npublic int points_awarded = 0;");
    gold.append("\n#score { // award points");
    gold.append("\n");
    gold.append("\n  foreach(p in iterate players where playing) {");
    gold.append("\n    int local_points = 0;");
    gold.append("\n    foreach(c in iterate deck where owner == p.link && place == Place::Taken) {");
    gold.append("\n      local_points += c.points;");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    if (local_points == 26) {");
    gold.append("\n      foreach(p2 in iterate players where playing && link != p.link) {");
    gold.append("\n        p2.points += 26;");
    gold.append("\n        points_awarded += 26;");
    gold.append("\n      }");
    gold.append("\n");
    gold.append("\n    }else {");
    gold.append("\n      p.points += local_points;");
    gold.append("\n      points_awarded += local_points;");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n  } // this may not respect rules, but... hey");
    gold.append("\n");
    gold.append("\n");
    gold.append("\n  if (passing_mode == PassingMode::Across) {");
    gold.append("\n    passing_mode = PassingMode::ToRight;");
    gold.append("\n  }else if (passing_mode == PassingMode::ToRight) {");
    gold.append("\n    passing_mode = PassingMode::ToLeft;");
    gold.append("\n  }else if (passing_mode == PassingMode::ToLeft) {");
    gold.append("\n    passing_mode = PassingMode::None;");
    gold.append("\n  }else if (passing_mode == PassingMode::None) {");
    gold.append("\n    passing_mode = PassingMode::Across;");
    gold.append("\n  }");
    gold.append("\n  transition #shuffle_and_distribute;");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n==========================================================");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.delta.secure.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.graph.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.algo.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.tables.*;");
    gold.append("\nimport org.adamalang.runtime.remote.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport org.adamalang.runtime.sys.cron.*;");
    gold.append("\nimport org.adamalang.runtime.sys.web.*;");
    gold.append("\nimport org.adamalang.runtime.text.*;");
    gold.append("\nimport java.time.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\npublic class GameHearts_1 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxCard> deck;");
    gold.append("\n  private final RxPrincipal owner;");
    gold.append("\n  private final RxTable<RTxPlayer> players;");
    gold.append("\n  private final RxLazy<NtList<RTxPlayer>> people;");
    gold.append("\n  private final RxTableGuard __people_players;");
    gold.append("\n  private final RxBoolean playing;");
    gold.append("\n  private final RxEnumInt32 passing_mode;");
    gold.append("\n  private final RxPrincipal player1;");
    gold.append("\n  private final RxPrincipal player2;");
    gold.append("\n  private final RxPrincipal player3;");
    gold.append("\n  private final RxPrincipal player4;");
    gold.append("\n  private final RxPrincipal current;");
    gold.append("\n  private final RxInt32 played;");
    gold.append("\n  private final RxEnumInt32 suit_in_play;");
    gold.append("\n  private final RxBoolean points_played;");
    gold.append("\n  private final RxPrincipal last_winner;");
    gold.append("\n  private final RxInt32 points_awarded;");
    gold.append("\n  private final RxLazy<NtList<RTxCard>> hand;");
    gold.append("\n  private final RxTableGuard __hand_deck;");
    gold.append("\n  private final RxLazy<Integer> players_connected;");
    gold.append("\n  private final RxTableGuard __players_connected_players;");
    gold.append("\n  private final RxLazy<Integer> observers_connected;");
    gold.append("\n  private final RxTableGuard __observers_connected_players;");
    gold.append("\n  private final RxLazy<NtList<RTxPlayer>> players_ordered;");
    gold.append("\n  private final RxTableGuard __players_ordered_players;");
    gold.append("\n  private final RxLazy<Boolean> ready;");
    gold.append("\n  private final RxLazy<NtList<RTxCard>> in_play;");
    gold.append("\n  private final RxTableGuard __in_play_deck;");
    gold.append("\n  private final RxGuard ___my_take;");
    gold.append("\n  private final RxTableGuard __my_take_deck;");
    gold.append("\n  public NtList<RTxCard> __COMPUTE_my_take(NtPrincipal __who, RTx__ViewerType __viewer) {");
    gold.append("\n    return deck.iterate(false).where(true, new __CLOSURE_WhereClause1(__who));");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    __sum += deck.__memory();");
    gold.append("\n    __sum += owner.__memory();");
    gold.append("\n    __sum += players.__memory();");
    gold.append("\n    __sum += people.__memory();");
    gold.append("\n    __sum += playing.__memory();");
    gold.append("\n    __sum += passing_mode.__memory();");
    gold.append("\n    __sum += player1.__memory();");
    gold.append("\n    __sum += player2.__memory();");
    gold.append("\n    __sum += player3.__memory();");
    gold.append("\n    __sum += player4.__memory();");
    gold.append("\n    __sum += current.__memory();");
    gold.append("\n    __sum += played.__memory();");
    gold.append("\n    __sum += suit_in_play.__memory();");
    gold.append("\n    __sum += points_played.__memory();");
    gold.append("\n    __sum += last_winner.__memory();");
    gold.append("\n    __sum += points_awarded.__memory();");
    gold.append("\n    __sum += hand.__memory();");
    gold.append("\n    __sum += players_connected.__memory();");
    gold.append("\n    __sum += observers_connected.__memory();");
    gold.append("\n    __sum += players_ordered.__memory();");
    gold.append("\n    __sum += ready.__memory();");
    gold.append("\n    __sum += in_play.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public GameHearts_1(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    deck = new RxTable<>(__self, this, \"deck\", (RxParent __parent) -> new RTxCard(__parent).__link(), 0);");
    gold.append("\n    owner = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    players = new RxTable<>(__self, this, \"players\", (RxParent __parent) -> new RTxPlayer(__parent).__link(), 0);");
    gold.append("\n    people = new RxLazy<NtList<RTxPlayer>>(this, () -> (NtList<RTxPlayer>)(players.iterate(false).orderBy(true, __ORDER_Player_play_order_a)), () -> __perf.measure(\"fRoot_people\"));");
    gold.append("\n    __people_players = new RxTableGuard(people);");
    gold.append("\n    playing = new RxBoolean(this, false);");
    gold.append("\n    passing_mode = new RxEnumInt32(this, 0, (__v) -> __EnumFix_PassingMode(__v));");
    gold.append("\n    player1 = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    player2 = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    player3 = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    player4 = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    current = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    played = new RxInt32(this, 0);");
    gold.append("\n    suit_in_play = new RxEnumInt32(this, 1, (__v) -> __EnumFix_Suit(__v));");
    gold.append("\n    points_played = new RxBoolean(this, false);");
    gold.append("\n    last_winner = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n    points_awarded = new RxInt32(this, 0);");
    gold.append("\n    hand = new RxLazy<NtList<RTxCard>>(this, () -> (NtList<RTxCard>)(deck.iterate(false).where(true, new __CLOSURE_WhereClause0())), () -> __perf.measure(\"fRoot_hand\"));");
    gold.append("\n    __hand_deck = new RxTableGuard(hand);");
    gold.append("\n    players_connected = new RxLazy<Integer>(this, () -> (Integer)((players.iterate(false).where(true, new __CLOSURE_WhereClause4())).size()), () -> __perf.measure(\"fRoot_players_connected\"));");
    gold.append("\n    __players_connected_players = new RxTableGuard(players_connected);");
    gold.append("\n    observers_connected = new RxLazy<Integer>(this, () -> (Integer)((players.iterate(false).where(true, new __CLOSURE_WhereClause5())).size()), () -> __perf.measure(\"fRoot_observers_connected\"));");
    gold.append("\n    __observers_connected_players = new RxTableGuard(observers_connected);");
    gold.append("\n    players_ordered = new RxLazy<NtList<RTxPlayer>>(this, () -> (NtList<RTxPlayer>)(players.iterate(false).where(false, new __CLOSURE_WhereClause6()).orderBy(true, __ORDER_Player_play_order_a)), () -> __perf.measure(\"fRoot_players_ordered\"));");
    gold.append("\n    __players_ordered_players = new RxTableGuard(players_ordered);");
    gold.append("\n    ready = new RxLazy<Boolean>(this, () -> (Boolean)(((int) players_connected.get()) == ((int) 4)), () -> __perf.measure(\"fRoot_ready\"));");
    gold.append("\n    in_play = new RxLazy<NtList<RTxCard>>(this, () -> (NtList<RTxCard>)(deck.iterate(false).where(false, new __CLOSURE_WhereClause33()).orderBy(true, __ORDER_Card_rank_d)), () -> __perf.measure(\"fRoot_in_play\"));");
    gold.append("\n    __in_play_deck = new RxTableGuard(in_play);");
    gold.append("\n    ___my_take =  new RxGuard(this);");
    gold.append("\n    __my_take_deck = new RxTableGuard(___my_take);");
    gold.append("\n    players.__subscribe(__people_players);");
    gold.append("\n    people.__guard(players,__people_players);");
    gold.append("\n    deck.__subscribe(__hand_deck);");
    gold.append("\n    hand.__guard(deck,__hand_deck);");
    gold.append("\n    players.__subscribe(__players_connected_players);");
    gold.append("\n    players_connected.__guard(players,__players_connected_players);");
    gold.append("\n    players.__subscribe(__observers_connected_players);");
    gold.append("\n    observers_connected.__guard(players,__observers_connected_players);");
    gold.append("\n    players.__subscribe(__players_ordered_players);");
    gold.append("\n    players_ordered.__guard(players,__players_ordered_players);");
    gold.append("\n    players_connected.__subscribe(ready);");
    gold.append("\n    deck.__subscribe(__in_play_deck);");
    gold.append("\n    in_play.__guard(deck,__in_play_deck);");
    gold.append("\n    deck.__subscribe(__my_take_deck);");
    gold.append("\n    ___my_take.__guard(deck,__my_take_deck);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __settle(Set<Integer> __viewers) {");
    gold.append("\n    deck.__settle(__viewers);");
    gold.append("\n    players.__settle(__viewers);");
    gold.append("\n    people.__settle(__viewers);");
    gold.append("\n    __people_players.__settle(__viewers);");
    gold.append("\n    hand.__settle(__viewers);");
    gold.append("\n    __hand_deck.__settle(__viewers);");
    gold.append("\n    players_connected.__settle(__viewers);");
    gold.append("\n    __players_connected_players.__settle(__viewers);");
    gold.append("\n    observers_connected.__settle(__viewers);");
    gold.append("\n    __observers_connected_players.__settle(__viewers);");
    gold.append("\n    players_ordered.__settle(__viewers);");
    gold.append("\n    __players_ordered_players.__settle(__viewers);");
    gold.append("\n    ready.__settle(__viewers);");
    gold.append("\n    in_play.__settle(__viewers);");
    gold.append("\n    __in_play_deck.__settle(__viewers);");
    gold.append("\n    ___my_take.__settle(__viewers);");
    gold.append("\n    __my_take_deck.__settle(__viewers);");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"deck\":");
    gold.append("\n            deck.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"owner\":");
    gold.append("\n            owner.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"players\":");
    gold.append("\n            players.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"playing\":");
    gold.append("\n            playing.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"passing_mode\":");
    gold.append("\n            passing_mode.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player1\":");
    gold.append("\n            player1.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player2\":");
    gold.append("\n            player2.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player3\":");
    gold.append("\n            player3.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player4\":");
    gold.append("\n            player4.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"current\":");
    gold.append("\n            current.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"played\":");
    gold.append("\n            played.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"suit_in_play\":");
    gold.append("\n            suit_in_play.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"points_played\":");
    gold.append("\n            points_played.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"last_winner\":");
    gold.append("\n            last_winner.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"points_awarded\":");
    gold.append("\n            points_awarded.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timezone\":");
    gold.append("\n            __timezone.__insert(__reader);");
    gold.append("\n            __timezoneCachedZoneId = ZoneId.of(__timezone.get());");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_gen\":");
    gold.append("\n            __auto_gen.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_cache_id\":");
    gold.append("\n            __auto_cache_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__cache\":");
    gold.append("\n            __cache.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webTaskId\":");
    gold.append("\n            __webTaskId.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__enqueued\":");
    gold.append("\n            __hydrateEnqueuedTaskManager(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webqueue\":");
    gold.append("\n            __hydrateWebQueue(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timeouts\":");
    gold.append("\n            __hydrateTimeouts(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__replication\":");
    gold.append("\n            __hydrateReplicationEngine(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"deck\":");
    gold.append("\n            deck.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"owner\":");
    gold.append("\n            owner.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"players\":");
    gold.append("\n            players.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"playing\":");
    gold.append("\n            playing.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"passing_mode\":");
    gold.append("\n            passing_mode.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player1\":");
    gold.append("\n            player1.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player2\":");
    gold.append("\n            player2.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player3\":");
    gold.append("\n            player3.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"player4\":");
    gold.append("\n            player4.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"current\":");
    gold.append("\n            current.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"played\":");
    gold.append("\n            played.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"suit_in_play\":");
    gold.append("\n            suit_in_play.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"points_played\":");
    gold.append("\n            points_played.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"last_winner\":");
    gold.append("\n            last_winner.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"points_awarded\":");
    gold.append("\n            points_awarded.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timezone\":");
    gold.append("\n            __timezone.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_gen\":");
    gold.append("\n            __auto_gen.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_cache_id\":");
    gold.append("\n            __auto_cache_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__cache\":");
    gold.append("\n            __cache.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webTaskId\":");
    gold.append("\n            __webTaskId.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__enqueued\":");
    gold.append("\n            __hydrateEnqueuedTaskManager(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webqueue\":");
    gold.append("\n            __hydrateWebQueue(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timeouts\":");
    gold.append("\n            __hydrateTimeouts(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__replication\":");
    gold.append("\n            __hydrateReplicationEngine(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__snapshot\");");
    gold.append("\n    __writer.writeString(__space + \"/\" + __key);__writer.writeObjectFieldIntro(\"deck\");");
    gold.append("\n    deck.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"owner\");");
    gold.append("\n    owner.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"players\");");
    gold.append("\n    players.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"playing\");");
    gold.append("\n    playing.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"passing_mode\");");
    gold.append("\n    passing_mode.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"player1\");");
    gold.append("\n    player1.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"player2\");");
    gold.append("\n    player2.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"player3\");");
    gold.append("\n    player3.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"player4\");");
    gold.append("\n    player4.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"current\");");
    gold.append("\n    current.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"played\");");
    gold.append("\n    played.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"suit_in_play\");");
    gold.append("\n    suit_in_play.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"points_played\");");
    gold.append("\n    points_played.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"last_winner\");");
    gold.append("\n    last_winner.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"points_awarded\");");
    gold.append("\n    points_awarded.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__timezone\");");
    gold.append("\n    __timezone.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_gen\");");
    gold.append("\n    __auto_gen.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_cache_id\");");
    gold.append("\n    __auto_cache_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__cache\");");
    gold.append("\n    __cache.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__webTaskId\");");
    gold.append("\n    __webTaskId.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __dumpEnqueuedTaskManager(__writer);");
    gold.append("\n    __dumpTimeouts(__writer);");
    gold.append("\n    __dumpWebQueue(__writer);");
    gold.append("\n    __dumpReplicationEngine(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __timezone.__commit(\"__timezone\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    __auto_gen.__commit(\"__auto_gen\", __forward, __reverse);");
    gold.append("\n    __auto_cache_id.__commit(\"__auto_cache_id\", __forward, __reverse);");
    gold.append("\n    __cache.__commit(\"__cache\", __forward, __reverse);");
    gold.append("\n    __webTaskId.__commit(\"__webTaskId\", __forward, __reverse);");
    gold.append("\n    deck.__commit(\"deck\", __forward, __reverse);");
    gold.append("\n    owner.__commit(\"owner\", __forward, __reverse);");
    gold.append("\n    players.__commit(\"players\", __forward, __reverse);");
    gold.append("\n    playing.__commit(\"playing\", __forward, __reverse);");
    gold.append("\n    passing_mode.__commit(\"passing_mode\", __forward, __reverse);");
    gold.append("\n    player1.__commit(\"player1\", __forward, __reverse);");
    gold.append("\n    player2.__commit(\"player2\", __forward, __reverse);");
    gold.append("\n    player3.__commit(\"player3\", __forward, __reverse);");
    gold.append("\n    player4.__commit(\"player4\", __forward, __reverse);");
    gold.append("\n    current.__commit(\"current\", __forward, __reverse);");
    gold.append("\n    played.__commit(\"played\", __forward, __reverse);");
    gold.append("\n    suit_in_play.__commit(\"suit_in_play\", __forward, __reverse);");
    gold.append("\n    points_played.__commit(\"points_played\", __forward, __reverse);");
    gold.append("\n    last_winner.__commit(\"last_winner\", __forward, __reverse);");
    gold.append("\n    points_awarded.__commit(\"points_awarded\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __timezone.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    __webTaskId.__revert();");
    gold.append("\n    deck.__revert();");
    gold.append("\n    owner.__revert();");
    gold.append("\n    players.__revert();");
    gold.append("\n    playing.__revert();");
    gold.append("\n    passing_mode.__revert();");
    gold.append("\n    player1.__revert();");
    gold.append("\n    player2.__revert();");
    gold.append("\n    player3.__revert();");
    gold.append("\n    player4.__revert();");
    gold.append("\n    current.__revert();");
    gold.append("\n    played.__revert();");
    gold.append("\n    suit_in_play.__revert();");
    gold.append("\n    points_played.__revert();");
    gold.append("\n    last_winner.__revert();");
    gold.append("\n    points_awarded.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  public class DeltaPrivacyCache {");
    gold.append("\n    public DeltaPrivacyCache(NtPrincipal __who) {}");
    gold.append("\n  }");
    gold.append("\n  private class DeltaGameHearts_1 implements DeltaNode {");
    gold.append("\n    private int __gpeople;");
    gold.append("\n    private DRecordList<DeltaRTxPlayer> __dpeople;");
    gold.append("\n    private DBoolean __dplaying;");
    gold.append("\n    private DInt32 __dpassing_mode;");
    gold.append("\n    private DInt32 __dplayed;");
    gold.append("\n    private DInt32 __dsuit_in_play;");
    gold.append("\n    private DBoolean __dpoints_played;");
    gold.append("\n    private DPrincipal __dlast_winner;");
    gold.append("\n    private DInt32 __dpoints_awarded;");
    gold.append("\n    private int __ghand;");
    gold.append("\n    private DRecordList<DeltaRTxCard> __dhand;");
    gold.append("\n    private int __gplayers_connected;");
    gold.append("\n    private DInt32 __dplayers_connected;");
    gold.append("\n    private int __gobservers_connected;");
    gold.append("\n    private DInt32 __dobservers_connected;");
    gold.append("\n    private int __gplayers_ordered;");
    gold.append("\n    private DRecordList<DeltaRTxPlayer> __dplayers_ordered;");
    gold.append("\n    private int __gready;");
    gold.append("\n    private DBoolean __dready;");
    gold.append("\n    private int __gin_play;");
    gold.append("\n    private DRecordList<DeltaRTxCard> __din_play;");
    gold.append("\n    private long __gmy_take;");
    gold.append("\n    private DRecordList<DeltaRTxCard> __dmy_take;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaGameHearts_1() {");
    gold.append("\n      __gpeople = -1;");
    gold.append("\n      __dpeople = new DRecordList<DeltaRTxPlayer>();");
    gold.append("\n      __dplaying = new DBoolean();");
    gold.append("\n      __dpassing_mode = new DInt32();");
    gold.append("\n      __dplayed = new DInt32();");
    gold.append("\n      __dsuit_in_play = new DInt32();");
    gold.append("\n      __dpoints_played = new DBoolean();");
    gold.append("\n      __dlast_winner = new DPrincipal();");
    gold.append("\n      __dpoints_awarded = new DInt32();");
    gold.append("\n      __ghand = -1;");
    gold.append("\n      __dhand = new DRecordList<DeltaRTxCard>();");
    gold.append("\n      __gplayers_connected = -1;");
    gold.append("\n      __dplayers_connected = new DInt32();");
    gold.append("\n      __gobservers_connected = -1;");
    gold.append("\n      __dobservers_connected = new DInt32();");
    gold.append("\n      __gplayers_ordered = -1;");
    gold.append("\n      __dplayers_ordered = new DRecordList<DeltaRTxPlayer>();");
    gold.append("\n      __gready = -1;");
    gold.append("\n      __dready = new DBoolean();");
    gold.append("\n      __gin_play = -1;");
    gold.append("\n      __din_play = new DRecordList<DeltaRTxCard>();");
    gold.append("\n      __gmy_take = -1;");
    gold.append("\n      __dmy_take = new DRecordList<DeltaRTxCard>();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dpeople.__memory();");
    gold.append("\n      __sum += __dplaying.__memory();");
    gold.append("\n      __sum += __dpassing_mode.__memory();");
    gold.append("\n      __sum += __dplayed.__memory();");
    gold.append("\n      __sum += __dsuit_in_play.__memory();");
    gold.append("\n      __sum += __dpoints_played.__memory();");
    gold.append("\n      __sum += __dlast_winner.__memory();");
    gold.append("\n      __sum += __dpoints_awarded.__memory();");
    gold.append("\n      __sum += __dhand.__memory();");
    gold.append("\n      __sum += __dplayers_connected.__memory();");
    gold.append("\n      __sum += __dobservers_connected.__memory();");
    gold.append("\n      __sum += __dplayers_ordered.__memory();");
    gold.append("\n      __sum += __dready.__memory();");
    gold.append("\n      __sum += __din_play.__memory();");
    gold.append("\n      __sum += __dmy_take.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public boolean show(GameHearts_1 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      DeltaPrivacyCache __policy_cache = new DeltaPrivacyCache(__writer.who);");
    gold.append("\n      __writer.setCacheObject(__policy_cache);");
    gold.append("\n      __code_cost += 15;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__gpeople != __item.people.getGeneration()) {");
    gold.append("\n        {");
    gold.append("\n          PrivateLazyDeltaWriter __list3 = __obj.planField(\"people\").planObject();");
    gold.append("\n          DRecordList<DeltaRTxPlayer> __deltaList4 = __dpeople;");
    gold.append("\n          DRecordList<DeltaRTxPlayer>.Walk __deltaListWalker5 = __deltaList4.begin();");
    gold.append("\n          for (RTxPlayer __listElement6 : __item.people.get()) {");
    gold.append("\n            DeltaRTxPlayer __deltaElement7 = __deltaList4.getPrior(__listElement6.__id(), () -> new DeltaRTxPlayer());");
    gold.append("\n            boolean __gate8 = __deltaElement7.show(__listElement6, __list3.planField(__listElement6.__id()));");
    gold.append("\n            if (__gate8) {");
    gold.append("\n              __deltaListWalker5.next(__listElement6.__id());");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n          __deltaListWalker5.end(__list3);");
    gold.append("\n          __list3.end();");
    gold.append("\n        }");
    gold.append("\n        __gpeople = __item.people.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      __dplaying.show(__item.playing.get(), __obj.planField(\"playing\"));");
    gold.append("\n      __dpassing_mode.show(__item.passing_mode.get(), __obj.planField(\"passing_mode\"));");
    gold.append("\n      __dplayed.show(__item.played.get(), __obj.planField(\"played\"));");
    gold.append("\n      __dsuit_in_play.show(__item.suit_in_play.get(), __obj.planField(\"suit_in_play\"));");
    gold.append("\n      __dpoints_played.show(__item.points_played.get(), __obj.planField(\"points_played\"));");
    gold.append("\n      __dlast_winner.show(__item.last_winner.get(), __obj.planField(\"last_winner\"));");
    gold.append("\n      __dpoints_awarded.show(__item.points_awarded.get(), __obj.planField(\"points_awarded\"));");
    gold.append("\n      if (__ghand != __item.hand.getGeneration()) {");
    gold.append("\n        {");
    gold.append("\n          PrivateLazyDeltaWriter __list9 = __obj.planField(\"hand\").planObject();");
    gold.append("\n          DRecordList<DeltaRTxCard> __deltaList10 = __dhand;");
    gold.append("\n          DRecordList<DeltaRTxCard>.Walk __deltaListWalker11 = __deltaList10.begin();");
    gold.append("\n          for (RTxCard __listElement12 : __item.hand.get()) {");
    gold.append("\n            DeltaRTxCard __deltaElement13 = __deltaList10.getPrior(__listElement12.__id(), () -> new DeltaRTxCard());");
    gold.append("\n            boolean __gate14 = __deltaElement13.show(__listElement12, __list9.planField(__listElement12.__id()));");
    gold.append("\n            if (__gate14) {");
    gold.append("\n              __deltaListWalker11.next(__listElement12.__id());");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n          __deltaListWalker11.end(__list9);");
    gold.append("\n          __list9.end();");
    gold.append("\n        }");
    gold.append("\n        __ghand = __item.hand.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gplayers_connected != __item.players_connected.getGeneration()) {");
    gold.append("\n        __dplayers_connected.show(__item.players_connected.get(), __obj.planField(\"players_connected\"));");
    gold.append("\n        __gplayers_connected = __item.players_connected.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gobservers_connected != __item.observers_connected.getGeneration()) {");
    gold.append("\n        __dobservers_connected.show(__item.observers_connected.get(), __obj.planField(\"observers_connected\"));");
    gold.append("\n        __gobservers_connected = __item.observers_connected.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gplayers_ordered != __item.players_ordered.getGeneration()) {");
    gold.append("\n        {");
    gold.append("\n          PrivateLazyDeltaWriter __list15 = __obj.planField(\"players_ordered\").planObject();");
    gold.append("\n          DRecordList<DeltaRTxPlayer> __deltaList16 = __dplayers_ordered;");
    gold.append("\n          DRecordList<DeltaRTxPlayer>.Walk __deltaListWalker17 = __deltaList16.begin();");
    gold.append("\n          for (RTxPlayer __listElement18 : __item.players_ordered.get()) {");
    gold.append("\n            DeltaRTxPlayer __deltaElement19 = __deltaList16.getPrior(__listElement18.__id(), () -> new DeltaRTxPlayer());");
    gold.append("\n            boolean __gate20 = __deltaElement19.show(__listElement18, __list15.planField(__listElement18.__id()));");
    gold.append("\n            if (__gate20) {");
    gold.append("\n              __deltaListWalker17.next(__listElement18.__id());");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n          __deltaListWalker17.end(__list15);");
    gold.append("\n          __list15.end();");
    gold.append("\n        }");
    gold.append("\n        __gplayers_ordered = __item.players_ordered.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gready != __item.ready.getGeneration()) {");
    gold.append("\n        __dready.show(__item.ready.get(), __obj.planField(\"ready\"));");
    gold.append("\n        __gready = __item.ready.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gin_play != __item.in_play.getGeneration()) {");
    gold.append("\n        {");
    gold.append("\n          PrivateLazyDeltaWriter __list21 = __obj.planField(\"in_play\").planObject();");
    gold.append("\n          DRecordList<DeltaRTxCard> __deltaList22 = __din_play;");
    gold.append("\n          DRecordList<DeltaRTxCard>.Walk __deltaListWalker23 = __deltaList22.begin();");
    gold.append("\n          for (RTxCard __listElement24 : __item.in_play.get()) {");
    gold.append("\n            DeltaRTxCard __deltaElement25 = __deltaList22.getPrior(__listElement24.__id(), () -> new DeltaRTxCard());");
    gold.append("\n            boolean __gate26 = __deltaElement25.show(__listElement24, __list21.planField(__listElement24.__id()));");
    gold.append("\n            if (__gate26) {");
    gold.append("\n              __deltaListWalker23.next(__listElement24.__id());");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n          __deltaListWalker23.end(__list21);");
    gold.append("\n          __list21.end();");
    gold.append("\n        }");
    gold.append("\n        __gin_play = __item.in_play.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      RTx__ViewerType __VIEWER = (RTx__ViewerType) __writer.viewerState;");
    gold.append("\n      long __CHECK = 0;");
    gold.append("\n      __CHECK = __item.___my_take.getGeneration(__writer.getViewId());");
    gold.append("\n      if (__gmy_take != __CHECK)  {");
    gold.append("\n        Runnable __PTb_my_take = __perf.measure(\"Root_b_my_take\");");
    gold.append("\n        __item.___my_take.startView(__writer.getViewId());");
    gold.append("\n        NtList<RTxCard> __local_my_take = __item.__COMPUTE_my_take(__writer.who, __VIEWER);");
    gold.append("\n        {");
    gold.append("\n          PrivateLazyDeltaWriter __list27 = __obj.planField(\"my_take\").planObject();");
    gold.append("\n          DRecordList<DeltaRTxCard> __deltaList28 = __dmy_take;");
    gold.append("\n          DRecordList<DeltaRTxCard>.Walk __deltaListWalker29 = __deltaList28.begin();");
    gold.append("\n          for (RTxCard __listElement30 : __local_my_take) {");
    gold.append("\n            DeltaRTxCard __deltaElement31 = __deltaList28.getPrior(__listElement30.__id(), () -> new DeltaRTxCard());");
    gold.append("\n            boolean __gate32 = __deltaElement31.show(__listElement30, __list27.planField(__listElement30.__id()));");
    gold.append("\n            if (__gate32) {");
    gold.append("\n              __deltaListWalker29.next(__listElement30.__id());");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n          __deltaListWalker29.end(__list27);");
    gold.append("\n          __list27.end();");
    gold.append("\n        }");
    gold.append("\n        __PTb_my_take.run();");
    gold.append("\n        __item.___my_take.finishView();");
    gold.append("\n        __gmy_take = __CHECK;");
    gold.append("\n      }");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dpeople.clear();");
    gold.append("\n      __dplaying.clear();");
    gold.append("\n      __dpassing_mode.clear();");
    gold.append("\n      __dplayed.clear();");
    gold.append("\n      __dsuit_in_play.clear();");
    gold.append("\n      __dpoints_played.clear();");
    gold.append("\n      __dlast_winner.clear();");
    gold.append("\n      __dpoints_awarded.clear();");
    gold.append("\n      __dhand.clear();");
    gold.append("\n      __dplayers_connected.clear();");
    gold.append("\n      __dobservers_connected.clear();");
    gold.append("\n      __dplayers_ordered.clear();");
    gold.append("\n      __dready.clear();");
    gold.append("\n      __din_play.clear();");
    gold.append("\n      __dmy_take.clear();");
    gold.append("\n      __code_cost += 15;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtPrincipal __who, Perspective ___perspective, AssetIdEncoder __encoder) {");
    gold.append("\n    GameHearts_1 __self = this;");
    gold.append("\n    DeltaGameHearts_1 __state = new DeltaGameHearts_1();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    int __viewId = __genViewId();");
    gold.append("\n    return new PrivateView(__viewId, __who, ___perspective, __encoder) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState, __encoder, __viewId));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType extends NtMessageBase {");
    gold.append("\n    private final RTx__ViewerType __this;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"anonymous\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS___ViewerType = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS___ViewerType;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustSkipObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() { __this = this; }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __code_cost += 0;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_Suit = new int[] {1, 2, 3, 4};");
    gold.append("\n  private static final String __EnumString_Suit(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n        return \"Clubs\";");
    gold.append("\n      case 2:");
    gold.append("\n        return \"Hearts\";");
    gold.append("\n      case 3:");
    gold.append("\n        return \"Spades\";");
    gold.append("\n      case 4:");
    gold.append("\n        return \"Diamonds\";");
    gold.append("\n      default:");
    gold.append("\n        return \"Clubs\";");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCycleNext_Suit(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 4:");
    gold.append("\n        return 1;");
    gold.append("\n      default:");
    gold.append("\n        return value + 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCyclePrev_Suit(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n        return 4;");
    gold.append("\n      default:");
    gold.append("\n        return value - 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumFix_Suit(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n      case 2:");
    gold.append("\n      case 3:");
    gold.append("\n      case 4:");
    gold.append("\n        return value;");
    gold.append("\n      default:");
    gold.append("\n        return 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_Rank = new int[] {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};");
    gold.append("\n  private static final String __EnumString_Rank(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 2:");
    gold.append("\n        return \"Two\";");
    gold.append("\n      case 3:");
    gold.append("\n        return \"Three\";");
    gold.append("\n      case 4:");
    gold.append("\n        return \"Four\";");
    gold.append("\n      case 5:");
    gold.append("\n        return \"Five\";");
    gold.append("\n      case 6:");
    gold.append("\n        return \"Six\";");
    gold.append("\n      case 7:");
    gold.append("\n        return \"Seven\";");
    gold.append("\n      case 8:");
    gold.append("\n        return \"Eight\";");
    gold.append("\n      case 9:");
    gold.append("\n        return \"Nine\";");
    gold.append("\n      case 10:");
    gold.append("\n        return \"Ten\";");
    gold.append("\n      case 11:");
    gold.append("\n        return \"Jack\";");
    gold.append("\n      case 12:");
    gold.append("\n        return \"Queen\";");
    gold.append("\n      case 13:");
    gold.append("\n        return \"King\";");
    gold.append("\n      case 14:");
    gold.append("\n        return \"Ace\";");
    gold.append("\n      default:");
    gold.append("\n        return \"Two\";");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCycleNext_Rank(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 14:");
    gold.append("\n        return 2;");
    gold.append("\n      default:");
    gold.append("\n        return value + 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCyclePrev_Rank(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 2:");
    gold.append("\n        return 14;");
    gold.append("\n      default:");
    gold.append("\n        return value - 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumFix_Rank(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 2:");
    gold.append("\n      case 3:");
    gold.append("\n      case 4:");
    gold.append("\n      case 5:");
    gold.append("\n      case 6:");
    gold.append("\n      case 7:");
    gold.append("\n      case 8:");
    gold.append("\n      case 9:");
    gold.append("\n      case 10:");
    gold.append("\n      case 11:");
    gold.append("\n      case 12:");
    gold.append("\n      case 13:");
    gold.append("\n      case 14:");
    gold.append("\n        return value;");
    gold.append("\n      default:");
    gold.append("\n        return 2;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_Place = new int[] {1, 2, 3, 4};");
    gold.append("\n  private static final String __EnumString_Place(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n        return \"Deck\";");
    gold.append("\n      case 2:");
    gold.append("\n        return \"Hand\";");
    gold.append("\n      case 3:");
    gold.append("\n        return \"InPlay\";");
    gold.append("\n      case 4:");
    gold.append("\n        return \"Taken\";");
    gold.append("\n      default:");
    gold.append("\n        return \"Deck\";");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCycleNext_Place(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 4:");
    gold.append("\n        return 1;");
    gold.append("\n      default:");
    gold.append("\n        return value + 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCyclePrev_Place(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n        return 4;");
    gold.append("\n      default:");
    gold.append("\n        return value - 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumFix_Place(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n      case 2:");
    gold.append("\n      case 3:");
    gold.append("\n      case 4:");
    gold.append("\n        return value;");
    gold.append("\n      default:");
    gold.append("\n        return 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static String[] __INDEX_COLUMNS_Card = new String[] {};");
    gold.append("\n  private class RTxCard extends RxRecordBase<RTxCard> {");
    gold.append("\n    private final RTxCard __this;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final RxEnumInt32 suit;");
    gold.append("\n    private final RxEnumInt32 rank;");
    gold.append("\n    private final RxPrincipal owner;");
    gold.append("\n    private final RxInt32 ordering;");
    gold.append("\n    private final RxEnumInt32 place;");
    gold.append("\n    private final RxLazy<Integer> points;");
    gold.append("\n    private RTxCard(RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      this.__this = this;");
    gold.append("\n      id = new RxInt32(this, 0);");
    gold.append("\n      suit = new RxEnumInt32(this, 1, (__v) -> __EnumFix_Suit(__v));");
    gold.append("\n      rank = new RxEnumInt32(this, 2, (__v) -> __EnumFix_Rank(__v));");
    gold.append("\n      owner = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n      ordering = new RxInt32(this, 0);");
    gold.append("\n      place = new RxEnumInt32(this, 1, (__v) -> __EnumFix_Place(__v));");
    gold.append("\n      points = new RxLazy<Integer>(this, () -> (Integer)((((int) suit.get()) == ((int) 2) ? 1 : (((int) suit.get()) == ((int) 3) && ((int) rank.get()) == ((int) 12) ? 13 : 0))), () -> __perf.measure(\"fCard_points\"));");
    gold.append("\n      points.__subscribe(this);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public boolean __POLICY_p(NtPrincipal __who){");
    gold.append("\n      __code_cost += 4;");
    gold.append("\n      __track(0);");
    gold.append("\n      if (((int) place.get()) == ((int) 2) || ((int) place.get()) == ((int) 4)) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(1);");
    gold.append("\n        return (__who).equals(owner.get());");
    gold.append("\n      }");
    gold.append("\n      __track(2);");
    gold.append("\n      if (((int) place.get()) == ((int) 3)) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(3);");
    gold.append("\n        return true;");
    gold.append("\n      }");
    gold.append("\n      __track(4);");
    gold.append("\n      return false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = super.__memory();");
    gold.append("\n      __sum += id.__memory();");
    gold.append("\n      __sum += suit.__memory();");
    gold.append("\n      __sum += rank.__memory();");
    gold.append("\n      __sum += owner.__memory();");
    gold.append("\n      __sum += ordering.__memory();");
    gold.append("\n      __sum += place.__memory();");
    gold.append("\n      __sum += points.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_Card;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Object __fieldOf(String __name) {");
    gold.append("\n      switch (__name) {");
    gold.append("\n        case \"id\":");
    gold.append("\n          return id;");
    gold.append("\n        case \"suit\":");
    gold.append("\n          return suit;");
    gold.append("\n        case \"rank\":");
    gold.append("\n          return rank;");
    gold.append("\n        case \"owner\":");
    gold.append("\n          return owner;");
    gold.append("\n        case \"ordering\":");
    gold.append("\n          return ordering;");
    gold.append("\n        case \"place\":");
    gold.append("\n          return place;");
    gold.append("\n        case \"points\":");
    gold.append("\n          return points;");
    gold.append("\n        default:");
    gold.append("\n          return null;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __settle(Set<Integer> __viewers) {");
    gold.append("\n      points.__settle(__viewers);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __insert(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"suit\":");
    gold.append("\n              suit.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"rank\":");
    gold.append("\n              rank.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"owner\":");
    gold.append("\n              owner.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"ordering\":");
    gold.append("\n              ordering.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"place\":");
    gold.append("\n              place.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __patch(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"suit\":");
    gold.append("\n              suit.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"rank\":");
    gold.append("\n              rank.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"owner\":");
    gold.append("\n              owner.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"ordering\":");
    gold.append("\n              ordering.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"place\":");
    gold.append("\n              place.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      id.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"suit\");");
    gold.append("\n      suit.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"rank\");");
    gold.append("\n      rank.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"owner\");");
    gold.append("\n      owner.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"ordering\");");
    gold.append("\n      ordering.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"place\");");
    gold.append("\n      place.__dump(__writer);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __forward.writeObjectFieldIntro(__name);");
    gold.append("\n        __forward.beginObject();");
    gold.append("\n        __reverse.writeObjectFieldIntro(__name);");
    gold.append("\n        __reverse.beginObject();");
    gold.append("\n        id.__commit(\"id\", __forward, __reverse);");
    gold.append("\n        suit.__commit(\"suit\", __forward, __reverse);");
    gold.append("\n        rank.__commit(\"rank\", __forward, __reverse);");
    gold.append("\n        owner.__commit(\"owner\", __forward, __reverse);");
    gold.append("\n        ordering.__commit(\"ordering\", __forward, __reverse);");
    gold.append("\n        place.__commit(\"place\", __forward, __reverse);");
    gold.append("\n        __forward.endObject();");
    gold.append("\n        __reverse.endObject();");
    gold.append("\n        __lowerDirtyCommit();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        suit.__revert();");
    gold.append("\n        rank.__revert();");
    gold.append("\n        owner.__revert();");
    gold.append("\n        ordering.__revert();");
    gold.append("\n        place.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __killFields() {}");
    gold.append("\n    @Override");
    gold.append("\n    public RTxCard __link() {");
    gold.append("\n      suit.__subscribe(points);");
    gold.append("\n      rank.__subscribe(points);");
    gold.append("\n      return this;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __invalidateIndex(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public void __pumpIndexEvents(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Card\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __setId(int __id, boolean __force) {");
    gold.append("\n      if (__force) {");
    gold.append("\n        id.forceSet(__id);");
    gold.append("\n      } else {");
    gold.append("\n        id.set(__id);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxCard implements DeltaNode {");
    gold.append("\n    private DInt32 __did;");
    gold.append("\n    private DInt32 __dsuit;");
    gold.append("\n    private DInt32 __drank;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxCard() {");
    gold.append("\n      __did = new DInt32();");
    gold.append("\n      __dsuit = new DInt32();");
    gold.append("\n      __drank = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __did.__memory();");
    gold.append("\n      __sum += __dsuit.__memory();");
    gold.append("\n      __sum += __drank.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public boolean show(RTxCard __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      DeltaPrivacyCache __policy_cache = (DeltaPrivacyCache) __writer.getCacheObject();");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      if (!__item.__POLICY_p(__writer.who)) {");
    gold.append("\n        hide(__writer);");
    gold.append("\n        return false;");
    gold.append("\n      }");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __did.show(__item.id.get(), __obj.planField(\"id\"));");
    gold.append("\n      __dsuit.show(__item.suit.get(), __obj.planField(\"suit\"));");
    gold.append("\n      __drank.show(__item.rank.get(), __obj.planField(\"rank\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __did.clear();");
    gold.append("\n      __dsuit.clear();");
    gold.append("\n      __drank.clear();");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  class DynCmp_RTxCard implements Comparator<RTxCard> {");
    gold.append("\n    private final CompareField[] parsed;");
    gold.append("\n    DynCmp_RTxCard(String instructions) {");
    gold.append("\n      this.parsed = DynCompareParser.parse(instructions);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxCard __a, RTxCard __b) {");
    gold.append("\n      for (CompareField field : parsed) {");
    gold.append("\n        int delta = 0;");
    gold.append("\n        switch (field.name) {");
    gold.append("\n          case \"id\":");
    gold.append("\n            delta = __a.id.compareTo(__b.id);");
    gold.append("\n            break;");
    gold.append("\n          case \"suit\":");
    gold.append("\n            delta = __a.suit.compareTo(__b.suit);");
    gold.append("\n            break;");
    gold.append("\n          case \"rank\":");
    gold.append("\n            delta = __a.rank.compareTo(__b.rank);");
    gold.append("\n            break;");
    gold.append("\n          case \"owner\":");
    gold.append("\n            delta = __a.owner.compareTo(__b.owner);");
    gold.append("\n            break;");
    gold.append("\n          case \"ordering\":");
    gold.append("\n            delta = __a.ordering.compareTo(__b.ordering);");
    gold.append("\n            break;");
    gold.append("\n          case \"place\":");
    gold.append("\n            delta = __a.place.compareTo(__b.place);");
    gold.append("\n            break;");
    gold.append("\n          case \"points\":");
    gold.append("\n            delta = __a.points.get().compareTo(__b.points.get());");
    gold.append("\n            break;");
    gold.append("\n        }");
    gold.append("\n        if (delta != 0) {");
    gold.append("\n          return field.desc ? -delta : delta;");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTxEmpty extends NtMessageBase {");
    gold.append("\n    private final RTxEmpty __this;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"Empty\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS_Empty = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_Empty;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTxEmpty(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustSkipObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTxEmpty() { __this = this; }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxEmpty implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxEmpty() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTxEmpty __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __code_cost += 0;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static String[] __INDEX_COLUMNS_Player = new String[] {};");
    gold.append("\n  private class RTxPlayer extends RxRecordBase<RTxPlayer> {");
    gold.append("\n    private final RTxPlayer __this;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final RxPrincipal link;");
    gold.append("\n    private final RxBoolean playing;");
    gold.append("\n    private final RxInt32 points;");
    gold.append("\n    private final RxBoolean leader;");
    gold.append("\n    private final RxInt32 play_order;");
    gold.append("\n    private RTxPlayer(RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      this.__this = this;");
    gold.append("\n      id = new RxInt32(this, 0);");
    gold.append("\n      link = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n      playing = new RxBoolean(this, false);");
    gold.append("\n      points = new RxInt32(this, 0);");
    gold.append("\n      leader = new RxBoolean(this, false);");
    gold.append("\n      play_order = new RxInt32(this, 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = super.__memory();");
    gold.append("\n      __sum += id.__memory();");
    gold.append("\n      __sum += link.__memory();");
    gold.append("\n      __sum += playing.__memory();");
    gold.append("\n      __sum += points.__memory();");
    gold.append("\n      __sum += leader.__memory();");
    gold.append("\n      __sum += play_order.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_Player;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Object __fieldOf(String __name) {");
    gold.append("\n      switch (__name) {");
    gold.append("\n        case \"id\":");
    gold.append("\n          return id;");
    gold.append("\n        case \"link\":");
    gold.append("\n          return link;");
    gold.append("\n        case \"playing\":");
    gold.append("\n          return playing;");
    gold.append("\n        case \"points\":");
    gold.append("\n          return points;");
    gold.append("\n        case \"leader\":");
    gold.append("\n          return leader;");
    gold.append("\n        case \"play_order\":");
    gold.append("\n          return play_order;");
    gold.append("\n        default:");
    gold.append("\n          return null;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __settle(Set<Integer> __viewers) {");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __insert(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"link\":");
    gold.append("\n              link.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"playing\":");
    gold.append("\n              playing.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"points\":");
    gold.append("\n              points.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"leader\":");
    gold.append("\n              leader.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"play_order\":");
    gold.append("\n              play_order.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __patch(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"link\":");
    gold.append("\n              link.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"playing\":");
    gold.append("\n              playing.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"points\":");
    gold.append("\n              points.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"leader\":");
    gold.append("\n              leader.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"play_order\":");
    gold.append("\n              play_order.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      id.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"link\");");
    gold.append("\n      link.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"playing\");");
    gold.append("\n      playing.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"points\");");
    gold.append("\n      points.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"leader\");");
    gold.append("\n      leader.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"play_order\");");
    gold.append("\n      play_order.__dump(__writer);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __forward.writeObjectFieldIntro(__name);");
    gold.append("\n        __forward.beginObject();");
    gold.append("\n        __reverse.writeObjectFieldIntro(__name);");
    gold.append("\n        __reverse.beginObject();");
    gold.append("\n        id.__commit(\"id\", __forward, __reverse);");
    gold.append("\n        link.__commit(\"link\", __forward, __reverse);");
    gold.append("\n        playing.__commit(\"playing\", __forward, __reverse);");
    gold.append("\n        points.__commit(\"points\", __forward, __reverse);");
    gold.append("\n        leader.__commit(\"leader\", __forward, __reverse);");
    gold.append("\n        play_order.__commit(\"play_order\", __forward, __reverse);");
    gold.append("\n        __forward.endObject();");
    gold.append("\n        __reverse.endObject();");
    gold.append("\n        __lowerDirtyCommit();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        link.__revert();");
    gold.append("\n        playing.__revert();");
    gold.append("\n        points.__revert();");
    gold.append("\n        leader.__revert();");
    gold.append("\n        play_order.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __killFields() {}");
    gold.append("\n    @Override");
    gold.append("\n    public RTxPlayer __link() {");
    gold.append("\n      return this;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __invalidateIndex(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public void __pumpIndexEvents(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Player\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __setId(int __id, boolean __force) {");
    gold.append("\n      if (__force) {");
    gold.append("\n        id.forceSet(__id);");
    gold.append("\n      } else {");
    gold.append("\n        id.set(__id);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxPlayer implements DeltaNode {");
    gold.append("\n    private DInt32 __did;");
    gold.append("\n    private DPrincipal __dlink;");
    gold.append("\n    private DInt32 __dpoints;");
    gold.append("\n    private DBoolean __dleader;");
    gold.append("\n    private DInt32 __dplay_order;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxPlayer() {");
    gold.append("\n      __did = new DInt32();");
    gold.append("\n      __dlink = new DPrincipal();");
    gold.append("\n      __dpoints = new DInt32();");
    gold.append("\n      __dleader = new DBoolean();");
    gold.append("\n      __dplay_order = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __did.__memory();");
    gold.append("\n      __sum += __dlink.__memory();");
    gold.append("\n      __sum += __dpoints.__memory();");
    gold.append("\n      __sum += __dleader.__memory();");
    gold.append("\n      __sum += __dplay_order.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public boolean show(RTxPlayer __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      DeltaPrivacyCache __policy_cache = (DeltaPrivacyCache) __writer.getCacheObject();");
    gold.append("\n      __code_cost += 5;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __did.show(__item.id.get(), __obj.planField(\"id\"));");
    gold.append("\n      __dlink.show(__item.link.get(), __obj.planField(\"link\"));");
    gold.append("\n      __dpoints.show(__item.points.get(), __obj.planField(\"points\"));");
    gold.append("\n      if (__writer.who.equals(__item.link.get())) {");
    gold.append("\n        __dleader.show(__item.leader.get(), __obj.planField(\"leader\"));");
    gold.append("\n        /* privacy check close up */");
    gold.append("\n      } else {");
    gold.append("\n        __dleader.hide(__obj.planField(\"leader\"));");
    gold.append("\n      }");
    gold.append("\n      if (__writer.who.equals(__item.link.get())) {");
    gold.append("\n        __dplay_order.show(__item.play_order.get(), __obj.planField(\"play_order\"));");
    gold.append("\n        /* privacy check close up */");
    gold.append("\n      } else {");
    gold.append("\n        __dplay_order.hide(__obj.planField(\"play_order\"));");
    gold.append("\n      }");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __did.clear();");
    gold.append("\n      __dlink.clear();");
    gold.append("\n      __dpoints.clear();");
    gold.append("\n      __dleader.clear();");
    gold.append("\n      __dplay_order.clear();");
    gold.append("\n      __code_cost += 5;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  class DynCmp_RTxPlayer implements Comparator<RTxPlayer> {");
    gold.append("\n    private final CompareField[] parsed;");
    gold.append("\n    DynCmp_RTxPlayer(String instructions) {");
    gold.append("\n      this.parsed = DynCompareParser.parse(instructions);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxPlayer __a, RTxPlayer __b) {");
    gold.append("\n      for (CompareField field : parsed) {");
    gold.append("\n        int delta = 0;");
    gold.append("\n        switch (field.name) {");
    gold.append("\n          case \"id\":");
    gold.append("\n            delta = __a.id.compareTo(__b.id);");
    gold.append("\n            break;");
    gold.append("\n          case \"link\":");
    gold.append("\n            delta = __a.link.compareTo(__b.link);");
    gold.append("\n            break;");
    gold.append("\n          case \"playing\":");
    gold.append("\n            delta = __a.playing.compareTo(__b.playing);");
    gold.append("\n            break;");
    gold.append("\n          case \"points\":");
    gold.append("\n            delta = __a.points.compareTo(__b.points);");
    gold.append("\n            break;");
    gold.append("\n          case \"leader\":");
    gold.append("\n            delta = __a.leader.compareTo(__b.leader);");
    gold.append("\n            break;");
    gold.append("\n          case \"play_order\":");
    gold.append("\n            delta = __a.play_order.compareTo(__b.play_order);");
    gold.append("\n            break;");
    gold.append("\n        }");
    gold.append("\n        if (delta != 0) {");
    gold.append("\n          return field.desc ? -delta : delta;");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_LeaderAction = new int[] {1, 2, 3, 10};");
    gold.append("\n  private static final String __EnumString_LeaderAction(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n        return \"PromoteObserver\";");
    gold.append("\n      case 2:");
    gold.append("\n        return \"DemotePlayer\";");
    gold.append("\n      case 3:");
    gold.append("\n        return \"ShufflePlayers\";");
    gold.append("\n      case 10:");
    gold.append("\n        return \"Begin\";");
    gold.append("\n      default:");
    gold.append("\n        return \"PromoteObserver\";");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCycleNext_LeaderAction(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 3:");
    gold.append("\n        return 10;");
    gold.append("\n      case 10:");
    gold.append("\n        return 1;");
    gold.append("\n      default:");
    gold.append("\n        return value + 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCyclePrev_LeaderAction(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n        return 10;");
    gold.append("\n      case 10:");
    gold.append("\n        return 3;");
    gold.append("\n      default:");
    gold.append("\n        return value - 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumFix_LeaderAction(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 1:");
    gold.append("\n      case 2:");
    gold.append("\n      case 3:");
    gold.append("\n      case 10:");
    gold.append("\n        return value;");
    gold.append("\n      default:");
    gold.append("\n        return 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTxLeaderActionMessage extends NtMessageBase {");
    gold.append("\n    private final RTxLeaderActionMessage __this;");
    gold.append("\n    private int action = 0;");
    gold.append("\n    private int id = 0;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"action\");");
    gold.append("\n      __hash.hashInteger(this.action);");
    gold.append("\n      __hash.hashString(\"id\");");
    gold.append("\n      __hash.hashInteger(this.id);");
    gold.append("\n      __hash.hashString(\"LeaderActionMessage\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS_LeaderActionMessage = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_LeaderActionMessage;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTxLeaderActionMessage(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustStartObject();");
    gold.append("\n      while (__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"action\":");
    gold.append("\n            this.action = __EnumFix_LeaderAction(__reader.readInteger());");
    gold.append("\n            break;");
    gold.append("\n          case \"id\":");
    gold.append("\n            this.id = __reader.readInteger();");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"action\");");
    gold.append("\n      __writer.writeInteger(action);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      __writer.writeInteger(id);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTxLeaderActionMessage() { __this = this; }");
    gold.append("\n    private RTxLeaderActionMessage(int action, int id) {");
    gold.append("\n      this.__this = this;");
    gold.append("\n      this.action = action;");
    gold.append("\n      this.id = id;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxLeaderActionMessage implements DeltaNode {");
    gold.append("\n    private DInt32 __did;");
    gold.append("\n    private DInt32 __daction;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxLeaderActionMessage() {");
    gold.append("\n      __did = new DInt32();");
    gold.append("\n      __daction = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __did.__memory();");
    gold.append("\n      __sum += __daction.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTxLeaderActionMessage __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __did.show(__item.id, __obj.planField(\"id\"));");
    gold.append("\n      __daction.show(__item.action, __obj.planField(\"action\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __did.clear();");
    gold.append("\n      __daction.clear();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int [] __ALL_VALUES_PassingMode = new int[] {0, 1, 2, 3};");
    gold.append("\n  private static final String __EnumString_PassingMode(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 0:");
    gold.append("\n        return \"Across\";");
    gold.append("\n      case 1:");
    gold.append("\n        return \"ToLeft\";");
    gold.append("\n      case 2:");
    gold.append("\n        return \"ToRight\";");
    gold.append("\n      case 3:");
    gold.append("\n        return \"None\";");
    gold.append("\n      default:");
    gold.append("\n        return \"Across\";");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCycleNext_PassingMode(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 3:");
    gold.append("\n        return 0;");
    gold.append("\n      default:");
    gold.append("\n        return value + 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumCyclePrev_PassingMode(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 0:");
    gold.append("\n        return 3;");
    gold.append("\n      default:");
    gold.append("\n        return value - 1;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static final int __EnumFix_PassingMode(int value) {");
    gold.append("\n    switch (value) {");
    gold.append("\n      case 0:");
    gold.append("\n      case 1:");
    gold.append("\n      case 2:");
    gold.append("\n      case 3:");
    gold.append("\n        return value;");
    gold.append("\n      default:");
    gold.append("\n        return 0;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTxCardDecision extends NtMessageBase {");
    gold.append("\n    private final RTxCardDecision __this;");
    gold.append("\n    private int id = 0;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"id\");");
    gold.append("\n      __hash.hashInteger(this.id);");
    gold.append("\n      __hash.hashString(\"CardDecision\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS_CardDecision = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_CardDecision;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTxCardDecision(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustStartObject();");
    gold.append("\n      while (__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"id\":");
    gold.append("\n            this.id = __reader.readInteger();");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      __writer.writeInteger(id);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTxCardDecision() { __this = this; }");
    gold.append("\n    private RTxCardDecision(int id) {");
    gold.append("\n      this.__this = this;");
    gold.append("\n      this.id = id;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxCardDecision implements DeltaNode {");
    gold.append("\n    private DInt32 __did;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxCardDecision() {");
    gold.append("\n      __did = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __did.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTxCardDecision __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __did.show(__item.id, __obj.planField(\"id\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __did.clear();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTx_AnonObjConvert_0 extends NtMessageBase {");
    gold.append("\n    private final RTx_AnonObjConvert_0 __this;");
    gold.append("\n    private boolean leader = false;");
    gold.append("\n    private NtPrincipal link = NtPrincipal.NO_ONE;");
    gold.append("\n    private int play_order = 0;");
    gold.append("\n    private boolean playing = false;");
    gold.append("\n    private int points = 0;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"leader\");");
    gold.append("\n      __hash.hashBoolean(this.leader);");
    gold.append("\n      __hash.hashString(\"link\");");
    gold.append("\n      __hash.hashNtPrincipal(this.link);");
    gold.append("\n      __hash.hashString(\"play_order\");");
    gold.append("\n      __hash.hashInteger(this.play_order);");
    gold.append("\n      __hash.hashString(\"playing\");");
    gold.append("\n      __hash.hashBoolean(this.playing);");
    gold.append("\n      __hash.hashString(\"points\");");
    gold.append("\n      __hash.hashInteger(this.points);");
    gold.append("\n      __hash.hashString(\"anonymous\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS__AnonObjConvert_0 = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS__AnonObjConvert_0;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustStartObject();");
    gold.append("\n      while (__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"leader\":");
    gold.append("\n            this.leader = __reader.readBoolean();");
    gold.append("\n            break;");
    gold.append("\n          case \"link\":");
    gold.append("\n            this.link = __reader.readNtPrincipal();");
    gold.append("\n            break;");
    gold.append("\n          case \"play_order\":");
    gold.append("\n            this.play_order = __reader.readInteger();");
    gold.append("\n            break;");
    gold.append("\n          case \"playing\":");
    gold.append("\n            this.playing = __reader.readBoolean();");
    gold.append("\n            break;");
    gold.append("\n          case \"points\":");
    gold.append("\n            this.points = __reader.readInteger();");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"leader\");");
    gold.append("\n      __writer.writeBoolean(leader);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"link\");");
    gold.append("\n      __writer.writeNtPrincipal(link);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"play_order\");");
    gold.append("\n      __writer.writeInteger(play_order);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"playing\");");
    gold.append("\n      __writer.writeBoolean(playing);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"points\");");
    gold.append("\n      __writer.writeInteger(points);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0() { __this = this; }");
    gold.append("\n    private RTx_AnonObjConvert_0(boolean leader, NtPrincipal link, int play_order, boolean playing, int points) {");
    gold.append("\n      this.__this = this;");
    gold.append("\n      this.leader = leader;");
    gold.append("\n      this.link = link;");
    gold.append("\n      this.play_order = play_order;");
    gold.append("\n      this.playing = playing;");
    gold.append("\n      this.points = points;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx_AnonObjConvert_0 implements DeltaNode {");
    gold.append("\n    private DBoolean __dleader;");
    gold.append("\n    private DPrincipal __dlink;");
    gold.append("\n    private DInt32 __dplay_order;");
    gold.append("\n    private DBoolean __dplaying;");
    gold.append("\n    private DInt32 __dpoints;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx_AnonObjConvert_0() {");
    gold.append("\n      __dleader = new DBoolean();");
    gold.append("\n      __dlink = new DPrincipal();");
    gold.append("\n      __dplay_order = new DInt32();");
    gold.append("\n      __dplaying = new DBoolean();");
    gold.append("\n      __dpoints = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dleader.__memory();");
    gold.append("\n      __sum += __dlink.__memory();");
    gold.append("\n      __sum += __dplay_order.__memory();");
    gold.append("\n      __sum += __dplaying.__memory();");
    gold.append("\n      __sum += __dpoints.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx_AnonObjConvert_0 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 5;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __dleader.show(__item.leader, __obj.planField(\"leader\"));");
    gold.append("\n      __dlink.show(__item.link, __obj.planField(\"link\"));");
    gold.append("\n      __dplay_order.show(__item.play_order, __obj.planField(\"play_order\"));");
    gold.append("\n      __dplaying.show(__item.playing, __obj.planField(\"playing\"));");
    gold.append("\n      __dpoints.show(__item.points, __obj.planField(\"points\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dleader.clear();");
    gold.append("\n      __dlink.clear();");
    gold.append("\n      __dplay_order.clear();");
    gold.append("\n      __dplaying.clear();");
    gold.append("\n      __dpoints.clear();");
    gold.append("\n      __code_cost += 5;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTx_AnonObjConvert_2 extends NtMessageBase {");
    gold.append("\n    private final RTx_AnonObjConvert_2 __this;");
    gold.append("\n    private int place = 0;");
    gold.append("\n    private int rank = 0;");
    gold.append("\n    private int suit = 0;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"place\");");
    gold.append("\n      __hash.hashInteger(this.place);");
    gold.append("\n      __hash.hashString(\"rank\");");
    gold.append("\n      __hash.hashInteger(this.rank);");
    gold.append("\n      __hash.hashString(\"suit\");");
    gold.append("\n      __hash.hashInteger(this.suit);");
    gold.append("\n      __hash.hashString(\"anonymous\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS__AnonObjConvert_2 = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS__AnonObjConvert_2;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustStartObject();");
    gold.append("\n      while (__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"place\":");
    gold.append("\n            this.place = __EnumFix_Place(__reader.readInteger());");
    gold.append("\n            break;");
    gold.append("\n          case \"rank\":");
    gold.append("\n            this.rank = __EnumFix_Rank(__reader.readInteger());");
    gold.append("\n            break;");
    gold.append("\n          case \"suit\":");
    gold.append("\n            this.suit = __EnumFix_Suit(__reader.readInteger());");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"place\");");
    gold.append("\n      __writer.writeInteger(place);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"rank\");");
    gold.append("\n      __writer.writeInteger(rank);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"suit\");");
    gold.append("\n      __writer.writeInteger(suit);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2() { __this = this; }");
    gold.append("\n    private RTx_AnonObjConvert_2(int place, int rank, int suit) {");
    gold.append("\n      this.__this = this;");
    gold.append("\n      this.place = place;");
    gold.append("\n      this.rank = rank;");
    gold.append("\n      this.suit = suit;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx_AnonObjConvert_2 implements DeltaNode {");
    gold.append("\n    private DInt32 __dplace;");
    gold.append("\n    private DInt32 __drank;");
    gold.append("\n    private DInt32 __dsuit;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx_AnonObjConvert_2() {");
    gold.append("\n      __dplace = new DInt32();");
    gold.append("\n      __drank = new DInt32();");
    gold.append("\n      __dsuit = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dplace.__memory();");
    gold.append("\n      __sum += __drank.__memory();");
    gold.append("\n      __sum += __dsuit.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx_AnonObjConvert_2 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __dplace.show(__item.place, __obj.planField(\"place\"));");
    gold.append("\n      __drank.show(__item.rank, __obj.planField(\"rank\"));");
    gold.append("\n      __dsuit.show(__item.suit, __obj.planField(\"suit\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dplace.clear();");
    gold.append("\n      __drank.clear();");
    gold.append("\n      __dsuit.clear();");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  public static HashMap<String, HashMap<String, Object>> __services() {");
    gold.append("\n    HashMap<String, HashMap<String, Object>> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __link(ServiceRegistry __registry) {}");
    gold.append("\n  @Override");
    gold.append("\n  public void __executeServiceCalls(boolean cancel) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String __getViewStateFilter() {");
    gold.append("\n    return \"[]\";");
    gold.append("\n  }");
    gold.append("\n  private final Sink<RTxLeaderActionMessage> __queue_leader = new Sink<>(\"leader\");");
    gold.append("\n  private final NtChannel<RTxLeaderActionMessage> leader = new NtChannel<>(__futures, __queue_leader);");
    gold.append("\n  private final Sink<RTxCardDecision[]> __queue_pass_channel = new Sink<>(\"pass_channel\");");
    gold.append("\n  private final NtChannel<RTxCardDecision[]> pass_channel = new NtChannel<>(__futures, __queue_pass_channel);");
    gold.append("\n  private final Sink<RTxCardDecision[]> __queue_single_play = new Sink<>(\"single_play\");");
    gold.append("\n  private final NtChannel<RTxCardDecision[]> single_play = new NtChannel<>(__futures, __queue_single_play);");
    gold.append("\n  @Override");
    gold.append("\n  protected boolean __is_direct_channel(String channel) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __handle_direct(CoreRequestContext context, String channel, Object __message) throws AbortMessageException {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask __task) {");
    gold.append("\n    switch (__task.channel) {");
    gold.append("\n      case \"leader\":");
    gold.append("\n        __queue_leader.enqueue(__task, (RTxLeaderActionMessage) __task.message);");
    gold.append("\n        return;");
    gold.append("\n      case \"pass_channel\":");
    gold.append("\n        __queue_pass_channel.enqueue(__task, (RTxCardDecision[]) __task.message);");
    gold.append("\n        return;");
    gold.append("\n      case \"single_play\":");
    gold.append("\n        __queue_single_play.enqueue(__task, (RTxCardDecision[]) __task.message);");
    gold.append("\n        return;");
    gold.append("\n      default:");
    gold.append("\n        return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message(String __channel, JsonStreamReader __reader) {");
    gold.append("\n    switch (__channel) {");
    gold.append("\n      case \"leader\":");
    gold.append("\n        return new RTxLeaderActionMessage(__reader);");
    gold.append("\n      case \"pass_channel\":");
    gold.append("\n        {");
    gold.append("\n          ArrayList<RTxCardDecision> __array_pass_channel = new ArrayList<>();");
    gold.append("\n          if (__reader.startArray()) {");
    gold.append("\n            while (__reader.notEndOfArray()) {");
    gold.append("\n              __array_pass_channel.add(new RTxCardDecision(__reader));");
    gold.append("\n            }");
    gold.append("\n          } else {");
    gold.append("\n            __array_pass_channel.add(new RTxCardDecision(__reader));");
    gold.append("\n          }");
    gold.append("\n          return __array_pass_channel.toArray(new RTxCardDecision[__array_pass_channel.size()]);");
    gold.append("\n        }");
    gold.append("\n");
    gold.append("\n      case \"single_play\":");
    gold.append("\n        {");
    gold.append("\n          ArrayList<RTxCardDecision> __array_single_play = new ArrayList<>();");
    gold.append("\n          if (__reader.startArray()) {");
    gold.append("\n            while (__reader.notEndOfArray()) {");
    gold.append("\n              __array_single_play.add(new RTxCardDecision(__reader));");
    gold.append("\n            }");
    gold.append("\n          } else {");
    gold.append("\n            __array_single_play.add(new RTxCardDecision(__reader));");
    gold.append("\n          }");
    gold.append("\n          return __array_single_play.toArray(new RTxCardDecision[__array_single_play.size()]);");
    gold.append("\n        }");
    gold.append("\n");
    gold.append("\n      default:");
    gold.append("\n        __reader.skipValue();");
    gold.append("\n        return NtMessageBase.NULL;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n    __queue_leader.clear();");
    gold.append("\n    __queue_pass_channel.clear();");
    gold.append("\n    __queue_single_play.clear();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __bindReplication() {}");
    gold.append("\n  @Override");
    gold.append("\n  public String __metrics() { return \"{}\"; }");
    gold.append("\n  @Override");
    gold.append("\n  public void __debug(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.writeObjectFieldIntro(\"tables\");");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"deck\");");
    gold.append("\n    deck.debug(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"players\");");
    gold.append("\n    players.debug(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __open_channel(String name) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String __auth(CoreRequestContext __context, String username, String password) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  public AuthResponse __authpipe(CoreRequestContext __context, String __message) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __password(CoreRequestContext __context, String __pw) {}");
    gold.append("\n  @Override");
    gold.append("\n  public void __make_cron_progress() {}");
    gold.append("\n  @Override");
    gold.append("\n  protected WebResponse __get_internal(CoreRequestContext __context, WebGet __request) throws AbortMessageException {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected WebResponse __put_internal(CoreRequestContext __context, WebPut __request) throws AbortMessageException {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected WebResponse __delete_internal(CoreRequestContext __context, WebDelete __request) throws AbortMessageException {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public WebResponse __options(CoreRequestContext __context, WebGet __request) {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  private void __step_lobby() {");
    gold.append("\n    __code_cost += 4;");
    gold.append("\n    __track(5);");
    gold.append("\n    final RTxLeaderActionMessage decision = leader.fetchItem(owner.get()).await();");
    gold.append("\n    __track(6);");
    gold.append("\n    if (((int) decision.action) == ((int) 1) && !ready.get()) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(7);");
    gold.append("\n      NtList<RxBoolean> _auto_33 = (players.iterate(false).where(true, new __CLOSURE_WhereClause7(decision))).transform((RTxPlayer item) -> (RxBoolean) (item.playing));");
    gold.append("\n      for (RxBoolean _auto_34 : _auto_33) {");
    gold.append("\n        _auto_34.set(true);");
    gold.append("\n      }");
    gold.append("\n");
    gold.append("\n    } else if (((int) decision.action) == ((int) 2)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(8);");
    gold.append("\n      NtList<RxBoolean> _auto_35 = (players.iterate(false).where(true, new __CLOSURE_WhereClause8(decision))).transform((RTxPlayer item) -> (RxBoolean) (item.playing));");
    gold.append("\n      for (RxBoolean _auto_36 : _auto_35) {");
    gold.append("\n        _auto_36.set(false);");
    gold.append("\n      }");
    gold.append("\n");
    gold.append("\n    } else if (((int) decision.action) == ((int) 3)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(9);");
    gold.append("\n      NtList<RxInt32> _auto_37 = (players.iterate(false).where(true, new __CLOSURE_WhereClause9())).transform((RTxPlayer item) -> (RxInt32) (item.play_order));");
    gold.append("\n      for (RxInt32 _auto_38 : _auto_37) {");
    gold.append("\n        _auto_38.set(__randomInt());");
    gold.append("\n      }");
    gold.append("\n");
    gold.append("\n    } else if (((int) decision.action) == ((int) 10)) {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      __track(10);");
    gold.append("\n      playing.set(true);");
    gold.append("\n      __track(11);");
    gold.append("\n      if (((int) (players.iterate(false).where(true, new __CLOSURE_WhereClause10())).size()) == ((int) 4)) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(12);");
    gold.append("\n        __transitionStateMachine(\"setup\", 0);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(13);");
    gold.append("\n    __transitionStateMachine(\"lobby\", 0);");
    gold.append("\n  }");
    gold.append("\n  private void __step_setup() {");
    gold.append("\n    __code_cost += 6;");
    gold.append("\n    __track(14);");
    gold.append("\n    for(Integer s : __ALL_VALUES_Suit) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(15);");
    gold.append("\n      for(Integer r : __ALL_VALUES_Rank) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(16);");
    gold.append("\n        {");
    gold.append("\n          RxTable<RTxCard> _AutoRef39 = deck;");
    gold.append("\n          RTx_AnonObjConvert_2 _AutoExpr41 = new RTx_AnonObjConvert_2(1, r, s);");
    gold.append("\n          RTxCard _CreateRef40 = _AutoRef39.make();");
    gold.append("\n          __code_cost += 4;");
    gold.append("\n          _CreateRef40.place.set(_AutoExpr41.place);");
    gold.append("\n          _CreateRef40.rank.set(_AutoExpr41.rank);");
    gold.append("\n          _CreateRef40.suit.set(_AutoExpr41.suit);");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(17);");
    gold.append("\n    NtList<RxInt32> _auto_42 = (players.iterate(false).where(true, new __CLOSURE_WhereClause11())).transform((RTxPlayer item) -> (RxInt32) (item.play_order));");
    gold.append("\n    for (RxInt32 _auto_43 : _auto_42) {");
    gold.append("\n      _auto_43.set(100);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(18);");
    gold.append("\n    int normativeOrder = 0;");
    gold.append("\n    __track(19);");
    gold.append("\n    NtList<RxInt32> _auto_44 = (players.iterate(false).where(false, new __CLOSURE_WhereClause12()).orderBy(true, __ORDER_Player_play_order_a)).transform((RTxPlayer item) -> (RxInt32) (item.play_order));");
    gold.append("\n    for (RxInt32 _auto_45 : _auto_44) {");
    gold.append("\n      _auto_45.set(normativeOrder++);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(20);");
    gold.append("\n    __transitionStateMachine(\"shuffle_and_distribute\", 0);");
    gold.append("\n  }");
    gold.append("\n  private void __step_shuffle_and_distribute() {");
    gold.append("\n    __code_cost += 7;");
    gold.append("\n    __track(21);");
    gold.append("\n    NtList<RxInt32> _auto_46 = (deck.iterate(true)).transform((RTxCard item) -> (RxInt32) (item.ordering));");
    gold.append("\n    for (RxInt32 _auto_47 : _auto_46) {");
    gold.append("\n      _auto_47.set(__randomInt());");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(22);");
    gold.append("\n    NtList<RxPrincipal> _auto_48 = (deck.iterate(true)).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n    for (RxPrincipal _auto_49 : _auto_48) {");
    gold.append("\n      _auto_49.set(NtPrincipal.NO_ONE);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(23);");
    gold.append("\n    NtList<RxEnumInt32> _auto_50 = (deck.iterate(true)).transform((RTxCard item) -> (RxEnumInt32) (item.place));");
    gold.append("\n    for (RxEnumInt32 _auto_51 : _auto_50) {");
    gold.append("\n      _auto_51.set(2);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(24);");
    gold.append("\n    RTxPlayer[] op = (players.iterate(false).where(false, new __CLOSURE_WhereClause13()).orderBy(true, __ORDER_Player_play_order_a)).toArray((Integer __n) -> (Object) (new RTxPlayer[__n]));");
    gold.append("\n    __track(25);");
    gold.append("\n    {");
    gold.append("\n      int k = 0;");
    gold.append("\n      for (;__goodwill(225, 18, 225, 23) && (k < 4);k++) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(26);");
    gold.append("\n        NtMaybe<RTxPlayer> _AutoConditionplayer_52;");
    gold.append("\n        if ((_AutoConditionplayer_52 = Utility.lookup(op, k)).has()) {");
    gold.append("\n          RTxPlayer player = _AutoConditionplayer_52.get();");
    gold.append("\n          __code_cost += 2;");
    gold.append("\n          __track(27);");
    gold.append("\n          NtList<RxPrincipal> _auto_53 = (deck.iterate(false).where(false, new __CLOSURE_WhereClause14()).orderBy(false, __ORDER_Card_ordering_a).limit(true, 13)).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n          for (RxPrincipal _auto_54 : _auto_53) {");
    gold.append("\n            _auto_54.set(player.link.get());");
    gold.append("\n          }");
    gold.append("\n");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(28);");
    gold.append("\n    __transitionStateMachine(\"pass\", 0);");
    gold.append("\n  }");
    gold.append("\n  private void __step_pass() {");
    gold.append("\n    __code_cost += 13;");
    gold.append("\n    __track(29);");
    gold.append("\n    if (((int) passing_mode.get()) == ((int) 3)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(30);");
    gold.append("\n      __transitionStateMachine(\"start_play\", 0);");
    gold.append("\n    }");
    gold.append("\n    __track(31);");
    gold.append("\n    RTxPlayer[] op = (players.iterate(false).where(false, new __CLOSURE_WhereClause15()).orderBy(true, __ORDER_Player_play_order_a)).toArray((Integer __n) -> (Object) (new RTxPlayer[__n]));");
    gold.append("\n    __track(32);");
    gold.append("\n    NtMaybe<RTxPlayer> _AutoConditionplayer_55;");
    gold.append("\n    if ((_AutoConditionplayer_55 = Utility.lookup(op, 0)).has()) {");
    gold.append("\n      RTxPlayer player = _AutoConditionplayer_55.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(33);");
    gold.append("\n      player1.set(player.link.get());");
    gold.append("\n    }");
    gold.append("\n    __track(34);");
    gold.append("\n    NtMaybe<RTxPlayer> _AutoConditionplayer_56;");
    gold.append("\n    if ((_AutoConditionplayer_56 = Utility.lookup(op, 1)).has()) {");
    gold.append("\n      RTxPlayer player = _AutoConditionplayer_56.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(35);");
    gold.append("\n      player2.set(player.link.get());");
    gold.append("\n    }");
    gold.append("\n    __track(36);");
    gold.append("\n    NtMaybe<RTxPlayer> _AutoConditionplayer_57;");
    gold.append("\n    if ((_AutoConditionplayer_57 = Utility.lookup(op, 2)).has()) {");
    gold.append("\n      RTxPlayer player = _AutoConditionplayer_57.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(37);");
    gold.append("\n      player3.set(player.link.get());");
    gold.append("\n    }");
    gold.append("\n    __track(38);");
    gold.append("\n    NtMaybe<RTxPlayer> _AutoConditionplayer_58;");
    gold.append("\n    if ((_AutoConditionplayer_58 = Utility.lookup(op, 3)).has()) {");
    gold.append("\n      RTxPlayer player = _AutoConditionplayer_58.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(39);");
    gold.append("\n      player4.set(player.link.get());");
    gold.append("\n    }");
    gold.append("\n    __track(40);");
    gold.append("\n    SimpleFuture<NtMaybe<RTxCardDecision[]>> pass1 = pass_channel.choose(player1.get(), Utility.convertMultiple(deck.iterate(false).where(true, new __CLOSURE_WhereClause16(player1)), (__n) -> new RTxCardDecision[__n], (__obj) -> new RTxCardDecision(__obj.id.get())), 3);");
    gold.append("\n    __track(41);");
    gold.append("\n    SimpleFuture<NtMaybe<RTxCardDecision[]>> pass2 = pass_channel.choose(player2.get(), Utility.convertMultiple(deck.iterate(false).where(true, new __CLOSURE_WhereClause17(player2)), (__n) -> new RTxCardDecision[__n], (__obj) -> new RTxCardDecision(__obj.id.get())), 3);");
    gold.append("\n    __track(42);");
    gold.append("\n    SimpleFuture<NtMaybe<RTxCardDecision[]>> pass3 = pass_channel.choose(player3.get(), Utility.convertMultiple(deck.iterate(false).where(true, new __CLOSURE_WhereClause18(player3)), (__n) -> new RTxCardDecision[__n], (__obj) -> new RTxCardDecision(__obj.id.get())), 3);");
    gold.append("\n    __track(43);");
    gold.append("\n    SimpleFuture<NtMaybe<RTxCardDecision[]>> pass4 = pass_channel.choose(player4.get(), Utility.convertMultiple(deck.iterate(false).where(true, new __CLOSURE_WhereClause19(player4)), (__n) -> new RTxCardDecision[__n], (__obj) -> new RTxCardDecision(__obj.id.get())), 3);");
    gold.append("\n    __track(44);");
    gold.append("\n    NtMaybe<RTxCardDecision[]> _AutoConditiondecision1_59;");
    gold.append("\n    if ((_AutoConditiondecision1_59 = pass1.await()).has()) {");
    gold.append("\n      RTxCardDecision[] decision1 = _AutoConditiondecision1_59.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(45);");
    gold.append("\n      NtMaybe<RTxCardDecision[]> _AutoConditiondecision2_60;");
    gold.append("\n      if ((_AutoConditiondecision2_60 = pass2.await()).has()) {");
    gold.append("\n        RTxCardDecision[] decision2 = _AutoConditiondecision2_60.get();");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(46);");
    gold.append("\n        NtMaybe<RTxCardDecision[]> _AutoConditiondecision3_61;");
    gold.append("\n        if ((_AutoConditiondecision3_61 = pass3.await()).has()) {");
    gold.append("\n          RTxCardDecision[] decision3 = _AutoConditiondecision3_61.get();");
    gold.append("\n          __code_cost += 2;");
    gold.append("\n          __track(47);");
    gold.append("\n          NtMaybe<RTxCardDecision[]> _AutoConditiondecision4_62;");
    gold.append("\n          if ((_AutoConditiondecision4_62 = pass4.await()).has()) {");
    gold.append("\n            RTxCardDecision[] decision4 = _AutoConditiondecision4_62.get();");
    gold.append("\n            __code_cost += 2;");
    gold.append("\n            __track(48);");
    gold.append("\n            if (((int) passing_mode.get()) == ((int) 2)) {");
    gold.append("\n              __code_cost += 5;");
    gold.append("\n              __track(49);");
    gold.append("\n              for(RTxCardDecision dec : decision1) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(50);");
    gold.append("\n                NtList<RxPrincipal> _auto_63 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause20(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_64 : _auto_63) {");
    gold.append("\n                  _auto_64.set(player2.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(51);");
    gold.append("\n              for(RTxCardDecision dec : decision2) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(52);");
    gold.append("\n                NtList<RxPrincipal> _auto_65 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause21(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_66 : _auto_65) {");
    gold.append("\n                  _auto_66.set(player3.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(53);");
    gold.append("\n              for(RTxCardDecision dec : decision3) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(54);");
    gold.append("\n                NtList<RxPrincipal> _auto_67 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause22(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_68 : _auto_67) {");
    gold.append("\n                  _auto_68.set(player4.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(55);");
    gold.append("\n              for(RTxCardDecision dec : decision4) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(56);");
    gold.append("\n                NtList<RxPrincipal> _auto_69 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause23(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_70 : _auto_69) {");
    gold.append("\n                  _auto_70.set(player1.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n            } else if (((int) passing_mode.get()) == ((int) 1)) {");
    gold.append("\n              __code_cost += 5;");
    gold.append("\n              __track(57);");
    gold.append("\n              for(RTxCardDecision dec : decision1) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(58);");
    gold.append("\n                NtList<RxPrincipal> _auto_71 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause24(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_72 : _auto_71) {");
    gold.append("\n                  _auto_72.set(player4.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(59);");
    gold.append("\n              for(RTxCardDecision dec : decision2) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(60);");
    gold.append("\n                NtList<RxPrincipal> _auto_73 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause25(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_74 : _auto_73) {");
    gold.append("\n                  _auto_74.set(player1.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(61);");
    gold.append("\n              for(RTxCardDecision dec : decision3) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(62);");
    gold.append("\n                NtList<RxPrincipal> _auto_75 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause26(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_76 : _auto_75) {");
    gold.append("\n                  _auto_76.set(player2.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(63);");
    gold.append("\n              for(RTxCardDecision dec : decision4) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(64);");
    gold.append("\n                NtList<RxPrincipal> _auto_77 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause27(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_78 : _auto_77) {");
    gold.append("\n                  _auto_78.set(player3.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n            } else if (((int) passing_mode.get()) == ((int) 0)) {");
    gold.append("\n              __code_cost += 5;");
    gold.append("\n              __track(65);");
    gold.append("\n              for(RTxCardDecision dec : decision1) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(66);");
    gold.append("\n                NtList<RxPrincipal> _auto_79 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause28(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_80 : _auto_79) {");
    gold.append("\n                  _auto_80.set(player3.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(67);");
    gold.append("\n              for(RTxCardDecision dec : decision2) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(68);");
    gold.append("\n                NtList<RxPrincipal> _auto_81 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause29(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_82 : _auto_81) {");
    gold.append("\n                  _auto_82.set(player4.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(69);");
    gold.append("\n              for(RTxCardDecision dec : decision3) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(70);");
    gold.append("\n                NtList<RxPrincipal> _auto_83 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause30(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_84 : _auto_83) {");
    gold.append("\n                  _auto_84.set(player1.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n              __track(71);");
    gold.append("\n              for(RTxCardDecision dec : decision4) {");
    gold.append("\n                __code_cost += 2;");
    gold.append("\n                __track(72);");
    gold.append("\n                NtList<RxPrincipal> _auto_85 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause31(dec))).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n                for (RxPrincipal _auto_86 : _auto_85) {");
    gold.append("\n                  _auto_86.set(player2.get());");
    gold.append("\n                }");
    gold.append("\n");
    gold.append("\n              }");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(73);");
    gold.append("\n    __transitionStateMachine(\"start_play\", 0);");
    gold.append("\n  }");
    gold.append("\n  private void __step_start_play() {");
    gold.append("\n    __code_cost += 5;");
    gold.append("\n    __track(74);");
    gold.append("\n    played.set(0);");
    gold.append("\n    __track(75);");
    gold.append("\n    current.set(player1.get());");
    gold.append("\n    __track(76);");
    gold.append("\n    NtMaybe<RTxCard> _AutoConditiontwo_clubs_87;");
    gold.append("\n    if ((_AutoConditiontwo_clubs_87 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause32())).lookup(0)).has()) {");
    gold.append("\n      RTxCard two_clubs = _AutoConditiontwo_clubs_87.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(77);");
    gold.append("\n      current.set(two_clubs.owner.get());");
    gold.append("\n    }");
    gold.append("\n    __track(78);");
    gold.append("\n    __transitionStateMachine(\"play\", 0);");
    gold.append("\n  }");
    gold.append("\n  private void __step_play() {");
    gold.append("\n    __code_cost += 8;");
    gold.append("\n    __track(79);");
    gold.append("\n    NtList<RTxCard> choices = deck.iterate(false).where(true, new __CLOSURE_WhereClause34(current, played, points_played, suit_in_play));");
    gold.append("\n    __track(80);");
    gold.append("\n    if (((int) choices.get().size()) == ((int) 0)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(81);");
    gold.append("\n      choices = deck.iterate(false).where(true, new __CLOSURE_WhereClause35(current));");
    gold.append("\n    }");
    gold.append("\n    __track(82);");
    gold.append("\n    SimpleFuture<NtMaybe<RTxCardDecision[]>> playX = single_play.choose(current.get(), Utility.convertMultiple(choices.get(), (__n) -> new RTxCardDecision[__n], (__obj) -> new RTxCardDecision(__obj.id.get())), 1);");
    gold.append("\n    __track(83);");
    gold.append("\n    NtMaybe<RTxCardDecision[]> _AutoConditionthePlay_88;");
    gold.append("\n    if ((_AutoConditionthePlay_88 = playX.await()).has()) {");
    gold.append("\n      RTxCardDecision[] thePlay = _AutoConditionthePlay_88.get();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(84);");
    gold.append("\n      for(RTxCardDecision dec : thePlay) {");
    gold.append("\n        __code_cost += 3;");
    gold.append("\n        __track(85);");
    gold.append("\n        NtList<RxEnumInt32> _auto_89 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause36(dec))).transform((RTxCard item) -> (RxEnumInt32) (item.place));");
    gold.append("\n        for (RxEnumInt32 _auto_90 : _auto_89) {");
    gold.append("\n          _auto_90.set(3);");
    gold.append("\n        }");
    gold.append("\n");
    gold.append("\n        __track(86);");
    gold.append("\n        NtMaybe<RTxCard> _AutoConditioncardPlayed_91;");
    gold.append("\n        if ((_AutoConditioncardPlayed_91 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause37(dec))).lookup(0)).has()) {");
    gold.append("\n          RTxCard cardPlayed = _AutoConditioncardPlayed_91.get();");
    gold.append("\n          __code_cost += 3;");
    gold.append("\n          __track(87);");
    gold.append("\n          if (cardPlayed.points.get() > 0) {");
    gold.append("\n            __code_cost += 2;");
    gold.append("\n            __track(88);");
    gold.append("\n            points_played.set(true);");
    gold.append("\n          }");
    gold.append("\n          __track(89);");
    gold.append("\n          if (((int) played.get()) == ((int) 0)) {");
    gold.append("\n            __code_cost += 2;");
    gold.append("\n            __track(90);");
    gold.append("\n            suit_in_play.set(cardPlayed.suit.get());");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(91);");
    gold.append("\n    if ((current.get()).equals(player1.get())) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(92);");
    gold.append("\n      current.set(player2.get());");
    gold.append("\n    } else if ((current.get()).equals(player2.get())) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(93);");
    gold.append("\n      current.set(player3.get());");
    gold.append("\n    } else if ((current.get()).equals(player3.get())) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(94);");
    gold.append("\n      current.set(player4.get());");
    gold.append("\n    } else if ((current.get()).equals(player4.get())) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(95);");
    gold.append("\n      current.set(player1.get());");
    gold.append("\n    }");
    gold.append("\n    __track(96);");
    gold.append("\n    if (((int) played.get()) == ((int) 3)) {");
    gold.append("\n      __code_cost += 6;");
    gold.append("\n      __track(97);");
    gold.append("\n      NtMaybe<RTxCard> _AutoConditionwinner_92;");
    gold.append("\n      if ((_AutoConditionwinner_92 = (deck.iterate(false).where(false, new __CLOSURE_WhereClause38(suit_in_play)).orderBy(true, __ORDER_Card_rank_d)).lookup(0)).has()) {");
    gold.append("\n        RTxCard winner = _AutoConditionwinner_92.get();");
    gold.append("\n        __code_cost += 3;");
    gold.append("\n        __track(98);");
    gold.append("\n        NtList<RxPrincipal> _auto_93 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause39())).transform((RTxCard item) -> (RxPrincipal) (item.owner));");
    gold.append("\n        for (RxPrincipal _auto_94 : _auto_93) {");
    gold.append("\n          _auto_94.set(winner.owner.get());");
    gold.append("\n        }");
    gold.append("\n");
    gold.append("\n        __track(99);");
    gold.append("\n        last_winner.set(winner.owner.get());");
    gold.append("\n      }");
    gold.append("\n      __track(100);");
    gold.append("\n      NtList<RxEnumInt32> _auto_95 = (deck.iterate(false).where(true, new __CLOSURE_WhereClause40())).transform((RTxCard item) -> (RxEnumInt32) (item.place));");
    gold.append("\n      for (RxEnumInt32 _auto_96 : _auto_95) {");
    gold.append("\n        _auto_96.set(4);");
    gold.append("\n      }");
    gold.append("\n");
    gold.append("\n      __track(101);");
    gold.append("\n      played.set(0);");
    gold.append("\n      __track(102);");
    gold.append("\n      current.set(last_winner.get());");
    gold.append("\n      __track(103);");
    gold.append("\n      if (((int) (deck.iterate(false).where(true, new __CLOSURE_WhereClause41(current))).size()) == ((int) 0)) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(104);");
    gold.append("\n        __transitionStateMachine(\"score\", 0);");
    gold.append("\n      }");
    gold.append("\n    } else {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(105);");
    gold.append("\n      played.bumpUpPost();");
    gold.append("\n    }");
    gold.append("\n    __track(106);");
    gold.append("\n    __transitionStateMachine(\"play\", 0);");
    gold.append("\n  }");
    gold.append("\n  private void __step_score() {");
    gold.append("\n    __code_cost += 4;");
    gold.append("\n    __track(107);");
    gold.append("\n    for(RTxPlayer p : players.iterate(false).where(true, new __CLOSURE_WhereClause42())) {");
    gold.append("\n      __code_cost += 4;");
    gold.append("\n      __track(108);");
    gold.append("\n      int local_points = 0;");
    gold.append("\n      __track(109);");
    gold.append("\n      for(RTxCard c : deck.iterate(false).where(true, new __CLOSURE_WhereClause43(p))) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(110);");
    gold.append("\n        local_points += c.points.get();");
    gold.append("\n      }");
    gold.append("\n      __track(111);");
    gold.append("\n      if (((int) local_points) == ((int) 26)) {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(112);");
    gold.append("\n        for(RTxPlayer p2 : players.iterate(false).where(true, new __CLOSURE_WhereClause44(p))) {");
    gold.append("\n          __code_cost += 3;");
    gold.append("\n          __track(113);");
    gold.append("\n          p2.points.opAddTo(26);");
    gold.append("\n          __track(114);");
    gold.append("\n          points_awarded.opAddTo(26);");
    gold.append("\n        }");
    gold.append("\n      } else {");
    gold.append("\n        __code_cost += 3;");
    gold.append("\n        __track(115);");
    gold.append("\n        p.points.opAddTo(local_points);");
    gold.append("\n        __track(116);");
    gold.append("\n        points_awarded.opAddTo(local_points);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(117);");
    gold.append("\n    if (((int) passing_mode.get()) == ((int) 0)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(118);");
    gold.append("\n      passing_mode.set(2);");
    gold.append("\n    } else if (((int) passing_mode.get()) == ((int) 2)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(119);");
    gold.append("\n      passing_mode.set(1);");
    gold.append("\n    } else if (((int) passing_mode.get()) == ((int) 1)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(120);");
    gold.append("\n      passing_mode.set(3);");
    gold.append("\n    } else if (((int) passing_mode.get()) == ((int) 3)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(121);");
    gold.append("\n      passing_mode.set(0);");
    gold.append("\n    }");
    gold.append("\n    __track(122);");
    gold.append("\n    __transitionStateMachine(\"shuffle_and_distribute\", 0);");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {");
    gold.append("\n    switch(__new_state) {");
    gold.append("\n      case \"lobby\":");
    gold.append("\n        __step_lobby();");
    gold.append("\n        return;");
    gold.append("\n      case \"setup\":");
    gold.append("\n        __step_setup();");
    gold.append("\n        return;");
    gold.append("\n      case \"shuffle_and_distribute\":");
    gold.append("\n        __step_shuffle_and_distribute();");
    gold.append("\n        return;");
    gold.append("\n      case \"pass\":");
    gold.append("\n        __step_pass();");
    gold.append("\n        return;");
    gold.append("\n      case \"start_play\":");
    gold.append("\n        __step_start_play();");
    gold.append("\n        return;");
    gold.append("\n      case \"play\":");
    gold.append("\n        __step_play();");
    gold.append("\n        return;");
    gold.append("\n      case \"score\":");
    gold.append("\n        __step_score();");
    gold.append("\n        return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  public boolean __onConnected__0(CoreRequestContext __context, NtPrincipal __who) {");
    gold.append("\n    __code_cost += 5;");
    gold.append("\n    __track(123);");
    gold.append("\n    if ((owner.get()).equals(NtPrincipal.NO_ONE)) {");
    gold.append("\n      __code_cost += 4;");
    gold.append("\n      __track(124);");
    gold.append("\n      owner.set(__who);");
    gold.append("\n      __track(125);");
    gold.append("\n      {");
    gold.append("\n        RxTable<RTxPlayer> _AutoRef97 = players;");
    gold.append("\n        RTx_AnonObjConvert_0 _AutoExpr99 = new RTx_AnonObjConvert_0(true, __who, 0, true, 0);");
    gold.append("\n        RTxPlayer _CreateRef98 = _AutoRef97.make();");
    gold.append("\n        __code_cost += 6;");
    gold.append("\n        _CreateRef98.leader.set(_AutoExpr99.leader);");
    gold.append("\n        _CreateRef98.link.set(_AutoExpr99.link);");
    gold.append("\n        _CreateRef98.play_order.set(_AutoExpr99.play_order);");
    gold.append("\n        _CreateRef98.playing.set(_AutoExpr99.playing);");
    gold.append("\n        _CreateRef98.points.set(_AutoExpr99.points);");
    gold.append("\n      }");
    gold.append("\n      __track(126);");
    gold.append("\n      __transitionStateMachine(\"lobby\", 0);");
    gold.append("\n    }");
    gold.append("\n    __track(127);");
    gold.append("\n    if ((owner.get()).equals(__who)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(128);");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    __track(129);");
    gold.append("\n    if (((int) (players.iterate(false).where(true, new __CLOSURE_WhereClause2(__who))).size()) == ((int) 0)) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(130);");
    gold.append("\n      {");
    gold.append("\n        RxTable<RTxPlayer> _AutoRef100 = players;");
    gold.append("\n        RTx_AnonObjConvert_0 _AutoExpr102 = new RTx_AnonObjConvert_0(false, __who, players.size(), false, 0);");
    gold.append("\n        RTxPlayer _CreateRef101 = _AutoRef100.make();");
    gold.append("\n        __code_cost += 6;");
    gold.append("\n        _CreateRef101.leader.set(_AutoExpr102.leader);");
    gold.append("\n        _CreateRef101.link.set(_AutoExpr102.link);");
    gold.append("\n        _CreateRef101.play_order.set(_AutoExpr102.play_order);");
    gold.append("\n        _CreateRef101.playing.set(_AutoExpr102.playing);");
    gold.append("\n        _CreateRef101.points.set(_AutoExpr102.points);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    __track(131);");
    gold.append("\n    return true;");
    gold.append("\n  }");
    gold.append("\n  public void __onDisconnected__0(CoreRequestContext __context, NtPrincipal __who) {");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(132);");
    gold.append("\n    (players.iterate(false).where(true, new __CLOSURE_WhereClause3(__who))).map((__item) -> { __item.__delete(); });");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(CoreRequestContext __context) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(CoreRequestContext __context) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(CoreRequestContext __context) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onLoad() {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(CoreRequestContext __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(CoreRequestContext __cvalue, NtAsset __pvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __delete(CoreRequestContext __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(CoreRequestContext __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    if (__onConnected__0(__cvalue, __cvalue.who)) __result = true;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(CoreRequestContext __cvalue) {");
    gold.append("\n    __onDisconnected__0(__cvalue, __cvalue.who);");
    gold.append("\n  }");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(CoreRequestContext _c, NtMessageBase _m) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause0 implements WhereClause<RTxCard> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) place) == ((int) 2);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause1 implements WhereClause<RTxCard> {");
    gold.append("\n    private NtPrincipal __who;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause1(NtPrincipal __who) {");
    gold.append("\n      this.__who = __who;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) place) == ((int) 4) && (owner).equals(__who);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause2 implements WhereClause<RTxPlayer> {");
    gold.append("\n    private NtPrincipal __who;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause2(NtPrincipal __who) {");
    gold.append("\n      this.__who = __who;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      NtPrincipal link = __obj.link.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (link).equals(__who);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause3 implements WhereClause<RTxPlayer> {");
    gold.append("\n    private NtPrincipal __who;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause3(NtPrincipal __who) {");
    gold.append("\n      this.__who = __who;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      NtPrincipal link = __obj.link.get();");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (link).equals(__who) && !playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause4 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause5 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return !playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause6 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause7 implements WhereClause<RTxPlayer> {");
    gold.append("\n    private RTxLeaderActionMessage decision;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return decision.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause7(RTxLeaderActionMessage decision) {");
    gold.append("\n      this.decision = decision;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) decision.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause8 implements WhereClause<RTxPlayer> {");
    gold.append("\n    private RTxLeaderActionMessage decision;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return decision.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause8(RTxLeaderActionMessage decision) {");
    gold.append("\n      this.decision = decision;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) decision.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause9 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause10 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause11 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return !playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause12 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause13 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause14 implements WhereClause<RTxCard> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(NtPrincipal.NO_ONE);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause15 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause16 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal player1;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause16(RxPrincipal player1) {");
    gold.append("\n      this.player1 = player1;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(player1.get());");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause17 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal player2;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause17(RxPrincipal player2) {");
    gold.append("\n      this.player2 = player2;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(player2.get());");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause18 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal player3;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause18(RxPrincipal player3) {");
    gold.append("\n      this.player3 = player3;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(player3.get());");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause19 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal player4;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause19(RxPrincipal player4) {");
    gold.append("\n      this.player4 = player4;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(player4.get());");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause20 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause20(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause21 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause21(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause22 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause22(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause23 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause23(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause24 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause24(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause25 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause25(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause26 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause26(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause27 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause27(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause28 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause28(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause29 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause29(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause30 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause30(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause31 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause31(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause32 implements WhereClause<RTxCard> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int rank = __obj.rank.get();");
    gold.append("\n      int suit = __obj.suit.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) rank) == ((int) 2) && ((int) suit) == ((int) 1);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause33 implements WhereClause<RTxCard> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) place) == ((int) 3);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause34 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal current;");
    gold.append("\n    private RxInt32 played;");
    gold.append("\n    private RxBoolean points_played;");
    gold.append("\n    private RxEnumInt32 suit_in_play;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause34(RxPrincipal current, RxInt32 played, RxBoolean points_played, RxEnumInt32 suit_in_play) {");
    gold.append("\n      this.current = current;");
    gold.append("\n      this.played = played;");
    gold.append("\n      this.points_played = points_played;");
    gold.append("\n      this.suit_in_play = suit_in_play;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      int points = __obj.points.get();");
    gold.append("\n      int suit = __obj.suit.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(current.get()) && ((int) place) == ((int) 2) && (((int) played.get()) == ((int) 0) && (points_played.get() || ((int) points) == ((int) 0)) || played.get() > 0 && ((int) suit_in_play.get()) == ((int) suit));");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause35 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal current;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause35(RxPrincipal current) {");
    gold.append("\n      this.current = current;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(current.get()) && ((int) place) == ((int) 2);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause36 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause36(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause37 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxCardDecision dec;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return dec.id;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause37(RTxCardDecision dec) {");
    gold.append("\n      this.dec = dec;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int id = __obj.id.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) id) == ((int) dec.id);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause38 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxEnumInt32 suit_in_play;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause38(RxEnumInt32 suit_in_play) {");
    gold.append("\n      this.suit_in_play = suit_in_play;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      int suit = __obj.suit.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) place) == ((int) 3) && ((int) suit) == ((int) suit_in_play.get());");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause39 implements WhereClause<RTxCard> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) place) == ((int) 3);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause40 implements WhereClause<RTxCard> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return ((int) place) == ((int) 3);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause41 implements WhereClause<RTxCard> {");
    gold.append("\n    private RxPrincipal current;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause41(RxPrincipal current) {");
    gold.append("\n      this.current = current;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(current.get()) && ((int) place) == ((int) 2);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause42 implements WhereClause<RTxPlayer> {");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause43 implements WhereClause<RTxCard> {");
    gold.append("\n    private RTxPlayer p;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause43(RTxPlayer p) {");
    gold.append("\n      this.p = p;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxCard __obj) {");
    gold.append("\n      NtPrincipal owner = __obj.owner.get();");
    gold.append("\n      int place = __obj.place.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return (owner).equals(p.link.get()) && ((int) place) == ((int) 4);");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class __CLOSURE_WhereClause44 implements WhereClause<RTxPlayer> {");
    gold.append("\n    private RTxPlayer p;");
    gold.append("\n    @Override");
    gold.append("\n    public void scopeByIndicies(IndexQuerySet __set) {");
    gold.append("\n      __set.finish();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Integer getPrimaryKey() {");
    gold.append("\n      return null;");
    gold.append("\n    }");
    gold.append("\n    private __CLOSURE_WhereClause44(RTxPlayer p) {");
    gold.append("\n      this.p = p;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public boolean test(RTxPlayer __obj) {");
    gold.append("\n      boolean playing = __obj.playing.get();");
    gold.append("\n      NtPrincipal link = __obj.link.get();");
    gold.append("\n      __code_cost ++;");
    gold.append("\n      return playing && !((link).equals(p.link.get()));");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private final static Comparator<RTxCard> __ORDER_Card_ordering_a = new Comparator<RTxCard>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxCard __a, RTxCard __b) {");
    gold.append("\n      return __a.ordering.compareTo(__b.ordering);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxCard> __ORDER_Card_rank_d = new Comparator<RTxCard>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxCard __a, RTxCard __b) {");
    gold.append("\n      return -__a.rank.compareTo(__b.rank);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  private final static Comparator<RTxPlayer> __ORDER_Player_play_order_a = new Comparator<RTxPlayer>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxPlayer __a, RTxPlayer __b) {");
    gold.append("\n      return __a.play_order.compareTo(__b.play_order);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--=[LivingDocumentFactory COMPILING]=---");
    gold.append("\n--=[LivingDocumentFactory MADE]=---");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"__Root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{\"deck\":{\"type\":{\"nature\":\"reactive_table\",\"record_name\":\"Card\"},\"privacy\":\"private\"},\"hand\":{\"type\":{\"nature\":\"native_list\",\"type\":{\"nature\":\"reactive_ref\",\"ref\":\"Card\"}},\"privacy\":\"public\"},\"owner\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"players\":{\"type\":{\"nature\":\"reactive_table\",\"record_name\":\"Player\"},\"privacy\":\"private\"},\"players_connected\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"observers_connected\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"people\":{\"type\":{\"nature\":\"native_list\",\"type\":{\"nature\":\"reactive_ref\",\"ref\":\"Player\"}},\"privacy\":\"public\"},\"players_ordered\":{\"type\":{\"nature\":\"native_list\",\"type\":{\"nature\":\"reactive_ref\",\"ref\":\"Player\"}},\"privacy\":\"public\"},\"ready\":{\"type\":{\"nature\":\"native_value\",\"type\":\"bool\"},\"privacy\":\"public\"},\"playing\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"bool\"},\"privacy\":\"public\"},\"passing_mode\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"enum\",\"enum\":\"PassingMode\",\"options\":{\"values\":{\"Across\":0,\"ToLeft\":1,\"ToRight\":2,\"None\":3},\"names\":{\"0\":\"Across\",\"1\":\"ToLeft\",\"2\":\"ToRight\",\"3\":\"None\"},\"default\":\"Across\"}},\"privacy\":\"public\"},\"player1\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"player2\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"player3\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"player4\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"current\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"played\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"suit_in_play\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"enum\",\"enum\":\"Suit\",\"options\":{\"values\":{\"Clubs\":1,\"Hearts\":2,\"Spades\":3,\"Diamonds\":4},\"names\":{\"1\":\"Clubs\",\"2\":\"Hearts\",\"3\":\"Spades\",\"4\":\"Diamonds\"},\"default\":\"Clubs\"}},\"privacy\":\"public\"},\"points_played\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"bool\"},\"privacy\":\"public\"},\"in_play\":{\"type\":{\"nature\":\"native_list\",\"type\":{\"nature\":\"reactive_ref\",\"ref\":\"Card\"}},\"privacy\":\"public\"},\"last_winner\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"public\"},\"points_awarded\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"my_take\":{\"type\":{\"nature\":\"native_list\",\"type\":{\"nature\":\"reactive_ref\",\"ref\":\"Card\"}},\"privacy\":\"bubble\"}}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}},\"Suit\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"Suit\",\"options\":{\"values\":{\"Clubs\":1,\"Hearts\":2,\"Spades\":3,\"Diamonds\":4},\"names\":{\"1\":\"Clubs\",\"2\":\"Hearts\",\"3\":\"Spades\",\"4\":\"Diamonds\"},\"default\":\"Clubs\"}},\"Rank\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"Rank\",\"options\":{\"values\":{\"Two\":2,\"Three\":3,\"Four\":4,\"Five\":5,\"Six\":6,\"Seven\":7,\"Eight\":8,\"Nine\":9,\"Ten\":10,\"Jack\":11,\"Queen\":12,\"King\":13,\"Ace\":14},\"names\":{\"2\":\"Two\",\"3\":\"Three\",\"4\":\"Four\",\"5\":\"Five\",\"6\":\"Six\",\"7\":\"Seven\",\"8\":\"Eight\",\"9\":\"Nine\",\"10\":\"Ten\",\"11\":\"Jack\",\"12\":\"Queen\",\"13\":\"King\",\"14\":\"Ace\"},\"default\":\"Two\"}},\"Place\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"Place\",\"options\":{\"values\":{\"Deck\":1,\"Hand\":2,\"InPlay\":3,\"Taken\":4},\"names\":{\"1\":\"Deck\",\"2\":\"Hand\",\"3\":\"InPlay\",\"4\":\"Taken\"},\"default\":\"Deck\"}},\"Card\":{\"nature\":\"reactive_record\",\"name\":\"Card\",\"fields\":{\"id\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"suit\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"enum\",\"enum\":\"Suit\",\"options\":{\"values\":{\"Clubs\":1,\"Hearts\":2,\"Spades\":3,\"Diamonds\":4},\"names\":{\"1\":\"Clubs\",\"2\":\"Hearts\",\"3\":\"Spades\",\"4\":\"Diamonds\"},\"default\":\"Clubs\"}},\"privacy\":\"public\"},\"rank\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"enum\",\"enum\":\"Rank\",\"options\":{\"values\":{\"Two\":2,\"Three\":3,\"Four\":4,\"Five\":5,\"Six\":6,\"Seven\":7,\"Eight\":8,\"Nine\":9,\"Ten\":10,\"Jack\":11,\"Queen\":12,\"King\":13,\"Ace\":14},\"names\":{\"2\":\"Two\",\"3\":\"Three\",\"4\":\"Four\",\"5\":\"Five\",\"6\":\"Six\",\"7\":\"Seven\",\"8\":\"Eight\",\"9\":\"Nine\",\"10\":\"Ten\",\"11\":\"Jack\",\"12\":\"Queen\",\"13\":\"King\",\"14\":\"Ace\"},\"default\":\"Two\"}},\"privacy\":\"public\"},\"owner\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"private\"},\"ordering\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"private\"},\"place\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"enum\",\"enum\":\"Place\",\"options\":{\"values\":{\"Deck\":1,\"Hand\":2,\"InPlay\":3,\"Taken\":4},\"names\":{\"1\":\"Deck\",\"2\":\"Hand\",\"3\":\"InPlay\",\"4\":\"Taken\"},\"default\":\"Deck\"}},\"privacy\":\"private\"},\"points\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"private\"}}},\"Empty\":{\"nature\":\"native_message\",\"name\":\"Empty\",\"anonymous\":false,\"fields\":{}},\"Player\":{\"nature\":\"reactive_record\",\"name\":\"Player\",\"fields\":{\"id\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"link\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"public\"},\"playing\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"bool\"},\"privacy\":\"private\"},\"points\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"leader\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"bool\"},\"privacy\":\"viewer_is\"},\"play_order\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"viewer_is\"}}},\"LeaderAction\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"LeaderAction\",\"options\":{\"values\":{\"PromoteObserver\":1,\"DemotePlayer\":2,\"ShufflePlayers\":3,\"Begin\":10},\"names\":{\"1\":\"PromoteObserver\",\"2\":\"DemotePlayer\",\"3\":\"ShufflePlayers\",\"10\":\"Begin\"},\"default\":\"PromoteObserver\"}},\"LeaderActionMessage\":{\"nature\":\"native_message\",\"name\":\"LeaderActionMessage\",\"anonymous\":false,\"fields\":{\"id\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"action\":{\"type\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"LeaderAction\",\"options\":{\"values\":{\"PromoteObserver\":1,\"DemotePlayer\":2,\"ShufflePlayers\":3,\"Begin\":10},\"names\":{\"1\":\"PromoteObserver\",\"2\":\"DemotePlayer\",\"3\":\"ShufflePlayers\",\"10\":\"Begin\"},\"default\":\"PromoteObserver\"}},\"privacy\":\"public\"}}},\"PassingMode\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"PassingMode\",\"options\":{\"values\":{\"Across\":0,\"ToLeft\":1,\"ToRight\":2,\"None\":3},\"names\":{\"0\":\"Across\",\"1\":\"ToLeft\",\"2\":\"ToRight\",\"3\":\"None\"},\"default\":\"Across\"}},\"CardDecision\":{\"nature\":\"native_message\",\"name\":\"CardDecision\",\"anonymous\":false,\"fields\":{\"id\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"public\"}}},\"_AnonObjConvert_0\":{\"nature\":\"native_message\",\"name\":\"_AnonObjConvert_0\",\"anonymous\":true,\"fields\":{\"leader\":{\"type\":{\"nature\":\"native_value\",\"type\":\"bool\"},\"privacy\":\"public\"},\"link\":{\"type\":{\"nature\":\"native_value\",\"type\":\"secure<principal>\"},\"privacy\":\"public\"},\"play_order\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"playing\":{\"type\":{\"nature\":\"native_value\",\"type\":\"bool\"},\"privacy\":\"public\"},\"points\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"},\"privacy\":\"public\"}}},\"_AnonObjConvert_2\":{\"nature\":\"native_message\",\"name\":\"_AnonObjConvert_2\",\"anonymous\":true,\"fields\":{\"place\":{\"type\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"Place\",\"options\":{\"values\":{\"Deck\":1,\"Hand\":2,\"InPlay\":3,\"Taken\":4},\"names\":{\"1\":\"Deck\",\"2\":\"Hand\",\"3\":\"InPlay\",\"4\":\"Taken\"},\"default\":\"Deck\"}},\"privacy\":\"public\"},\"rank\":{\"type\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"Rank\",\"options\":{\"values\":{\"Two\":2,\"Three\":3,\"Four\":4,\"Five\":5,\"Six\":6,\"Seven\":7,\"Eight\":8,\"Nine\":9,\"Ten\":10,\"Jack\":11,\"Queen\":12,\"King\":13,\"Ace\":14},\"names\":{\"2\":\"Two\",\"3\":\"Three\",\"4\":\"Four\",\"5\":\"Five\",\"6\":\"Six\",\"7\":\"Seven\",\"8\":\"Eight\",\"9\":\"Nine\",\"10\":\"Ten\",\"11\":\"Jack\",\"12\":\"Queen\",\"13\":\"King\",\"14\":\"Ace\"},\"default\":\"Two\"}},\"privacy\":\"public\"},\"suit\":{\"type\":{\"nature\":\"native_value\",\"type\":\"enum\",\"enum\":\"Suit\",\"options\":{\"values\":{\"Clubs\":1,\"Hearts\":2,\"Spades\":3,\"Diamonds\":4},\"names\":{\"1\":\"Clubs\",\"2\":\"Hearts\",\"3\":\"Spades\",\"4\":\"Diamonds\"},\"default\":\"Clubs\"}},\"privacy\":\"public\"}}}},\"channels\":{\"leader\":\"LeaderActionMessage\",\"pass_channel\":\"CardDecision\",\"single_play\":\"CardDecision\"},\"channels-privacy\":{\"leader\":{\"open\":false,\"privacy\":[]},\"pass_channel\":{\"open\":false,\"privacy\":[]},\"single_play\":{\"open\":false,\"privacy\":[]}},\"constructors\":[],\"labels\":[\"lobby\",\"setup\",\"shuffle_and_distribute\",\"pass\",\"start_play\",\"play\",\"score\"]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\",\"key\":\"0\",\"origin\":\"origin\",\"ip\":\"ip\"}-->{\"__constructed\":true,\"__entropy\":\"-4962768465676381896\",\"__messages\":null,\"__seq\":1} need:false in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"25\"} need:false in:0");
    gold.append("\nCPU:0");
    gold.append("\nMEMORY:1618");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"50\"} need:false in:0");
    gold.append("\nNO_ONE: CREATED PRIVATE VIEW");
    gold.append("\n+ NO_ONE DELTA:{\"data\":{\"playing\":false,\"passing_mode\":0,\"played\":0,\"suit_in_play\":1,\"points_played\":false,\"last_winner\":{\"@t\":1,\"agent\":\"?\",\"authority\":\"?\"},\"points_awarded\":0,\"players_connected\":0,\"observers_connected\":0,\"ready\":false},\"seq\":3}");
    gold.append("\n{\"command\":\"connect\",\"timestamp\":\"75\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"key\":\"key\",\"origin\":\"phase\",\"ip\":\"ip\"}-->{\"__state\":\"lobby\",\"__next_time\":\"75\",\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__connection_id\":1,\"__time\":\"75\",\"__auto_table_row_id\":1,\"players\":{\"1\":{\"id\":1,\"link\":{\"agent\":\"?\",\"authority\":\"?\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0}},\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"}}} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"75\"}-->{\"__blocked_on\":\"leader\",\"__blocked\":true,\"__seq\":5} need:false in:0");
    gold.append("\nNO_ONE|SUCCESS:4");
    gold.append("\n+ NO_ONE DELTA:{\"data\":{\"people\":{\"1\":{\"id\":1,\"link\":{\"@t\":1,\"agent\":\"?\",\"authority\":\"?\"},\"points\":0,\"leader\":true,\"play_order\":0},\"@o\":[1]},\"players_connected\":1,\"players_ordered\":{\"1\":{\"id\":1,\"link\":{\"@t\":1,\"agent\":\"?\",\"authority\":\"?\"},\"points\":0,\"leader\":true,\"play_order\":0},\"@o\":[1]}},\"outstanding\":[{\"id\":1,\"channel\":\"leader\",\"array\":false}],\"blockers\":[{\"agent\":\"?\",\"authority\":\"?\"}],\"seq\":4}");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"125\"}-->{\"__blocked_on\":\"leader\",\"__seq\":6} need:false in:0");
    gold.append("\nRANDO: CREATED PRIVATE VIEW");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":5}");
    gold.append("\n+ RANDO DELTA:{\"data\":{\"people\":{\"1\":{\"id\":1,\"link\":{\"@t\":1,\"agent\":\"?\",\"authority\":\"?\"},\"points\":0},\"@o\":[1]},\"playing\":false,\"passing_mode\":0,\"played\":0,\"suit_in_play\":1,\"points_played\":false,\"last_winner\":{\"@t\":1,\"agent\":\"?\",\"authority\":\"?\"},\"points_awarded\":0,\"players_connected\":1,\"observers_connected\":0,\"players_ordered\":{\"1\":{\"id\":1,\"link\":{\"@t\":1,\"agent\":\"?\",\"authority\":\"?\"},\"points\":0},\"@o\":[1]},\"ready\":false},\"outstanding\":[],\"blockers\":[{\"agent\":\"?\",\"authority\":\"?\"}],\"seq\":5}");
    gold.append("\n{\"command\":\"connect\",\"timestamp\":\"150\",\"who\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"key\":\"key\",\"origin\":\"phase\",\"ip\":\"ip\"}-->{\"__next_time\":\"150\",\"__seq\":7,\"__connection_id\":2,\"__time\":\"150\",\"__auto_table_row_id\":2,\"owner\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"players\":{\"2\":{\"id\":2,\"link\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0}},\"__clients\":{\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}}} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"150\"}-->{\"__blocked_on\":\"leader\",\"__seq\":8} need:false in:0");
    gold.append("\nRANDO|SUCCESS:7");
    gold.append("\n+ NO_ONE DELTA:{\"data\":{\"people\":{\"2\":{\"id\":2,\"link\":{\"@t\":1,\"agent\":\"rando\",\"authority\":\"random-place\"},\"points\":0},\"@o\":[1,2]},\"players_connected\":2,\"players_ordered\":{\"2\":{\"id\":2,\"link\":{\"@t\":1,\"agent\":\"rando\",\"authority\":\"random-place\"},\"points\":0},\"@o\":[1,2]}},\"outstanding\":[],\"blockers\":[{\"agent\":\"rando\",\"authority\":\"random-place\"}],\"seq\":7}");
    gold.append("\n+ RANDO DELTA:{\"data\":{\"people\":{\"2\":{\"id\":2,\"link\":{\"@t\":1,\"agent\":\"rando\",\"authority\":\"random-place\"},\"points\":0,\"leader\":true,\"play_order\":0},\"@o\":[1,2]},\"players_connected\":2,\"players_ordered\":{\"2\":{\"id\":2,\"link\":{\"@t\":1,\"agent\":\"rando\",\"authority\":\"random-place\"},\"points\":0,\"leader\":true,\"play_order\":0},\"@o\":[1,2]}},\"outstanding\":[{\"id\":2,\"channel\":\"leader\",\"array\":false}],\"blockers\":[{\"agent\":\"rando\",\"authority\":\"random-place\"}],\"seq\":7}");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"200\"}-->{\"__blocked_on\":\"leader\",\"__seq\":9} need:false in:0");
    gold.append("\nRANDO|SUCCESS:9");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":8}");
    gold.append("\n+ RANDO DELTA:{\"seq\":8}");
    gold.append("\nMEMORY:5940");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__snapshot\":\"0/0\",\"deck\":{},\"owner\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"players\":{\"1\":{\"id\":1,\"link\":{\"agent\":\"?\",\"authority\":\"?\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0},\"2\":{\"id\":2,\"link\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0}},\"playing\":false,\"passing_mode\":0,\"player1\":{\"agent\":\"?\",\"authority\":\"?\"},\"player2\":{\"agent\":\"?\",\"authority\":\"?\"},\"player3\":{\"agent\":\"?\",\"authority\":\"?\"},\"player4\":{\"agent\":\"?\",\"authority\":\"?\"},\"current\":{\"agent\":\"?\",\"authority\":\"?\"},\"played\":0,\"suit_in_play\":1,\"points_played\":false,\"last_winner\":{\"agent\":\"?\",\"authority\":\"?\"},\"points_awarded\":0,\"__state\":\"lobby\",\"__constructed\":true,\"__next_time\":\"150\",\"__last_expire_time\":\"0\",\"__blocked\":true,\"__seq\":9,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":2,\"__message_id\":0,\"__time\":\"150\",\"__timezone\":\"UTC\",\"__auto_table_row_id\":2,\"__auto_gen\":0,\"__auto_cache_id\":0,\"__cache\":{},\"__webTaskId\":0,\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"},\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__webqueue\":{},\"__replication\":{}}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{}");
    gold.append("\n--METRIC RESULTS-----------------------------------");
    gold.append("\n{\"__snapshot\":\"0/0\",\"deck\":{},\"owner\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"players\":{\"1\":{\"id\":1,\"link\":{\"agent\":\"?\",\"authority\":\"?\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0},\"2\":{\"id\":2,\"link\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0}},\"playing\":false,\"passing_mode\":0,\"player1\":{\"agent\":\"?\",\"authority\":\"?\"},\"player2\":{\"agent\":\"?\",\"authority\":\"?\"},\"player3\":{\"agent\":\"?\",\"authority\":\"?\"},\"player4\":{\"agent\":\"?\",\"authority\":\"?\"},\"current\":{\"agent\":\"?\",\"authority\":\"?\"},\"played\":0,\"suit_in_play\":1,\"points_played\":false,\"last_winner\":{\"agent\":\"?\",\"authority\":\"?\"},\"points_awarded\":0,\"__state\":\"lobby\",\"__constructed\":true,\"__next_time\":\"150\",\"__last_expire_time\":\"0\",\"__blocked\":true,\"__seq\":9,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":2,\"__message_id\":0,\"__time\":\"150\",\"__timezone\":\"UTC\",\"__auto_table_row_id\":2,\"__auto_gen\":0,\"__auto_cache_id\":0,\"__cache\":{},\"__webTaskId\":0,\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"},\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__webqueue\":{},\"__replication\":{}}");
    gold.append("\n{\"__snapshot\":\"0/0\",\"deck\":{},\"owner\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"players\":{\"1\":{\"id\":1,\"link\":{\"agent\":\"?\",\"authority\":\"?\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0},\"2\":{\"id\":2,\"link\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"playing\":true,\"points\":0,\"leader\":true,\"play_order\":0}},\"playing\":false,\"passing_mode\":0,\"player1\":{\"agent\":\"?\",\"authority\":\"?\"},\"player2\":{\"agent\":\"?\",\"authority\":\"?\"},\"player3\":{\"agent\":\"?\",\"authority\":\"?\"},\"player4\":{\"agent\":\"?\",\"authority\":\"?\"},\"current\":{\"agent\":\"?\",\"authority\":\"?\"},\"played\":0,\"suit_in_play\":1,\"points_played\":false,\"last_winner\":{\"agent\":\"?\",\"authority\":\"?\"},\"points_awarded\":0,\"__state\":\"lobby\",\"__constructed\":true,\"__next_time\":\"150\",\"__last_expire_time\":\"0\",\"__blocked\":true,\"__seq\":9,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":2,\"__message_id\":0,\"__time\":\"150\",\"__timezone\":\"UTC\",\"__auto_table_row_id\":2,\"__auto_gen\":0,\"__auto_cache_id\":0,\"__cache\":{},\"__webTaskId\":0,\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"},\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__webqueue\":{},\"__replication\":{}}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_chat_2 = null;
  private String get_chat_2() {
    if (cached_chat_2 != null) {
      return cached_chat_2;
    }
    cached_chat_2 = generateTestOutput(true, "chat_2", "./test_code/DemoInstrumented_chat_success.a");
    return cached_chat_2;
  }

  @Test
  public void testchatEmission() {
    assertEmissionGood(get_chat_2());
  }

  @Test
  public void testchatSuccess() {
    assertLivePass(get_chat_2());
  }

  @Test
  public void testchatNoFormatException() {
    assertNoFormatException(get_chat_2());
  }

  @Test
  public void testchatGoodWillHappy() {
    assertGoodWillHappy(get_chat_2());
  }

  @Test
  public void testchatExceptionFree() {
    assertExceptionFree(get_chat_2());
  }

  @Test
  public void testchatTODOFree() {
    assertTODOFree(get_chat_2());
  }

  @Test
  public void stable_chat_2() {
    String live = get_chat_2();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:DemoInstrumented_chat_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n=FORMAT===================================================");
    gold.append("\n @static { // anyone can create");
    gold.append("\n");
    gold.append("\n  create {");
    gold.append("\n    return true;");
    gold.append("\n  }");
    gold.append("\n  invent {");
    gold.append("\n    return true;");
    gold.append("\n  }");
    gold.append("\n  maximum_history = 250;");
    gold.append("\n} // let anyone into the document");
    gold.append("\n");
    gold.append("\n@connected {");
    gold.append("\n  return true;");
    gold.append("\n} // the lines of chat");
    gold.append("\n");
    gold.append("\nrecord Line {");
    gold.append("\n  public principal who;");
    gold.append("\n  public string what;");
    gold.append("\n  public long when;");
    gold.append("\n} // the chat table");
    gold.append("\n");
    gold.append("\ntable<Line> _chat;// how someone communicates to the document");
    gold.append("\n");
    gold.append("\nmessage Say {");
    gold.append("\n  string what;");
    gold.append("\n} // the \"channel\" which enables someone to say something");
    gold.append("\n");
    gold.append("\nchannel say(Say what) { // ingest the line into the chat");
    gold.append("\n");
    gold.append("\n  _chat <- {");
    gold.append("\n      who:@who,");
    gold.append("\n      what:what.what,");
    gold.append("\n      when: Time.now()");
    gold.append("\n    };");
    gold.append("\n  (iterate _chat order by when desc offset 50).delete();");
    gold.append("\n} // emit the data out");
    gold.append("\n");
    gold.append("\npublic formula chat = iterate _chat;");
    gold.append("\nprocedure foo() -> int {");
    gold.append("\n  return 123;");
    gold.append("\n}");
    gold.append("\nfunction g(int x, int y) -> int {");
    gold.append("\n  return x + y;");
    gold.append("\n}");
    gold.append("\nrecord R {");
    gold.append("\n  method foo() -> int {");
    gold.append("\n    return 1;");
    gold.append("\n  }");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n==========================================================");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.delta.secure.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.graph.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.algo.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.tables.*;");
    gold.append("\nimport org.adamalang.runtime.remote.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport org.adamalang.runtime.sys.cron.*;");
    gold.append("\nimport org.adamalang.runtime.sys.web.*;");
    gold.append("\nimport org.adamalang.runtime.text.*;");
    gold.append("\nimport java.time.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\npublic class chat_2 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxLine> _chat;");
    gold.append("\n  private final RxLazy<NtList<RTxLine>> chat;");
    gold.append("\n  private final RxTableGuard __chat__chat;");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    __sum += _chat.__memory();");
    gold.append("\n    __sum += chat.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public chat_2(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    _chat = new RxTable<>(__self, this, \"_chat\", (RxParent __parent) -> new RTxLine(__parent).__link(), 0);");
    gold.append("\n    chat = new RxLazy<NtList<RTxLine>>(this, () -> (NtList<RTxLine>)(_chat.iterate(true)), () -> __perf.measure(\"fRoot_chat\"));");
    gold.append("\n    __chat__chat = new RxTableGuard(chat);");
    gold.append("\n    _chat.__subscribe(__chat__chat);");
    gold.append("\n    chat.__guard(_chat,__chat__chat);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __settle(Set<Integer> __viewers) {");
    gold.append("\n    _chat.__settle(__viewers);");
    gold.append("\n    chat.__settle(__viewers);");
    gold.append("\n    __chat__chat.__settle(__viewers);");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"_chat\":");
    gold.append("\n            _chat.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timezone\":");
    gold.append("\n            __timezone.__insert(__reader);");
    gold.append("\n            __timezoneCachedZoneId = ZoneId.of(__timezone.get());");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_gen\":");
    gold.append("\n            __auto_gen.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_cache_id\":");
    gold.append("\n            __auto_cache_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__cache\":");
    gold.append("\n            __cache.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webTaskId\":");
    gold.append("\n            __webTaskId.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__enqueued\":");
    gold.append("\n            __hydrateEnqueuedTaskManager(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webqueue\":");
    gold.append("\n            __hydrateWebQueue(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timeouts\":");
    gold.append("\n            __hydrateTimeouts(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__replication\":");
    gold.append("\n            __hydrateReplicationEngine(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"_chat\":");
    gold.append("\n            _chat.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timezone\":");
    gold.append("\n            __timezone.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_gen\":");
    gold.append("\n            __auto_gen.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_cache_id\":");
    gold.append("\n            __auto_cache_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__cache\":");
    gold.append("\n            __cache.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webTaskId\":");
    gold.append("\n            __webTaskId.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__enqueued\":");
    gold.append("\n            __hydrateEnqueuedTaskManager(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__webqueue\":");
    gold.append("\n            __hydrateWebQueue(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__timeouts\":");
    gold.append("\n            __hydrateTimeouts(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__replication\":");
    gold.append("\n            __hydrateReplicationEngine(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__snapshot\");");
    gold.append("\n    __writer.writeString(__space + \"/\" + __key);__writer.writeObjectFieldIntro(\"_chat\");");
    gold.append("\n    _chat.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__timezone\");");
    gold.append("\n    __timezone.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_gen\");");
    gold.append("\n    __auto_gen.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_cache_id\");");
    gold.append("\n    __auto_cache_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__cache\");");
    gold.append("\n    __cache.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__webTaskId\");");
    gold.append("\n    __webTaskId.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __dumpEnqueuedTaskManager(__writer);");
    gold.append("\n    __dumpTimeouts(__writer);");
    gold.append("\n    __dumpWebQueue(__writer);");
    gold.append("\n    __dumpReplicationEngine(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __timezone.__commit(\"__timezone\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    __auto_gen.__commit(\"__auto_gen\", __forward, __reverse);");
    gold.append("\n    __auto_cache_id.__commit(\"__auto_cache_id\", __forward, __reverse);");
    gold.append("\n    __cache.__commit(\"__cache\", __forward, __reverse);");
    gold.append("\n    __webTaskId.__commit(\"__webTaskId\", __forward, __reverse);");
    gold.append("\n    _chat.__commit(\"_chat\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __timezone.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    __webTaskId.__revert();");
    gold.append("\n    _chat.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  public class DeltaPrivacyCache {");
    gold.append("\n    public DeltaPrivacyCache(NtPrincipal __who) {}");
    gold.append("\n  }");
    gold.append("\n  private class Deltachat_2 implements DeltaNode {");
    gold.append("\n    private int __gchat;");
    gold.append("\n    private DRecordList<DeltaRTxLine> __dchat;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private Deltachat_2() {");
    gold.append("\n      __gchat = -1;");
    gold.append("\n      __dchat = new DRecordList<DeltaRTxLine>();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dchat.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public boolean show(chat_2 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      DeltaPrivacyCache __policy_cache = new DeltaPrivacyCache(__writer.who);");
    gold.append("\n      __writer.setCacheObject(__policy_cache);");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__gchat != __item.chat.getGeneration()) {");
    gold.append("\n        {");
    gold.append("\n          PrivateLazyDeltaWriter __list4 = __obj.planField(\"chat\").planObject();");
    gold.append("\n          DRecordList<DeltaRTxLine> __deltaList5 = __dchat;");
    gold.append("\n          DRecordList<DeltaRTxLine>.Walk __deltaListWalker6 = __deltaList5.begin();");
    gold.append("\n          for (RTxLine __listElement7 : __item.chat.get()) {");
    gold.append("\n            DeltaRTxLine __deltaElement8 = __deltaList5.getPrior(__listElement7.__id(), () -> new DeltaRTxLine());");
    gold.append("\n            boolean __gate9 = __deltaElement8.show(__listElement7, __list4.planField(__listElement7.__id()));");
    gold.append("\n            if (__gate9) {");
    gold.append("\n              __deltaListWalker6.next(__listElement7.__id());");
    gold.append("\n            }");
    gold.append("\n          }");
    gold.append("\n          __deltaListWalker6.end(__list4);");
    gold.append("\n          __list4.end();");
    gold.append("\n        }");
    gold.append("\n        __gchat = __item.chat.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dchat.clear();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtPrincipal __who, Perspective ___perspective, AssetIdEncoder __encoder) {");
    gold.append("\n    chat_2 __self = this;");
    gold.append("\n    Deltachat_2 __state = new Deltachat_2();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    int __viewId = __genViewId();");
    gold.append("\n    return new PrivateView(__viewId, __who, ___perspective, __encoder) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState, __encoder, __viewId));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType extends NtMessageBase {");
    gold.append("\n    private final RTx__ViewerType __this;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"anonymous\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS___ViewerType = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS___ViewerType;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustSkipObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() { __this = this; }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __code_cost += 0;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static String[] __INDEX_COLUMNS_Line = new String[] {};");
    gold.append("\n  private class RTxLine extends RxRecordBase<RTxLine> {");
    gold.append("\n    private final RTxLine __this;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private final RxPrincipal who;");
    gold.append("\n    private final RxString what;");
    gold.append("\n    private final RxInt64 when;");
    gold.append("\n    private RTxLine(RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      this.__this = this;");
    gold.append("\n      id = new RxInt32(this, 0);");
    gold.append("\n      who = new RxPrincipal(this, NtPrincipal.NO_ONE);");
    gold.append("\n      what = new RxString(this, \"\");");
    gold.append("\n      when = new RxInt64(this, 0L);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = super.__memory();");
    gold.append("\n      __sum += id.__memory();");
    gold.append("\n      __sum += who.__memory();");
    gold.append("\n      __sum += what.__memory();");
    gold.append("\n      __sum += when.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_Line;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Object __fieldOf(String __name) {");
    gold.append("\n      switch (__name) {");
    gold.append("\n        case \"id\":");
    gold.append("\n          return id;");
    gold.append("\n        case \"who\":");
    gold.append("\n          return who;");
    gold.append("\n        case \"what\":");
    gold.append("\n          return what;");
    gold.append("\n        case \"when\":");
    gold.append("\n          return when;");
    gold.append("\n        default:");
    gold.append("\n          return null;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __settle(Set<Integer> __viewers) {");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __insert(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"who\":");
    gold.append("\n              who.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"what\":");
    gold.append("\n              what.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"when\":");
    gold.append("\n              when.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __patch(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"who\":");
    gold.append("\n              who.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"what\":");
    gold.append("\n              what.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"when\":");
    gold.append("\n              when.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      id.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"who\");");
    gold.append("\n      who.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"what\");");
    gold.append("\n      what.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"when\");");
    gold.append("\n      when.__dump(__writer);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __forward.writeObjectFieldIntro(__name);");
    gold.append("\n        __forward.beginObject();");
    gold.append("\n        __reverse.writeObjectFieldIntro(__name);");
    gold.append("\n        __reverse.beginObject();");
    gold.append("\n        id.__commit(\"id\", __forward, __reverse);");
    gold.append("\n        who.__commit(\"who\", __forward, __reverse);");
    gold.append("\n        what.__commit(\"what\", __forward, __reverse);");
    gold.append("\n        when.__commit(\"when\", __forward, __reverse);");
    gold.append("\n        __forward.endObject();");
    gold.append("\n        __reverse.endObject();");
    gold.append("\n        __lowerDirtyCommit();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        who.__revert();");
    gold.append("\n        what.__revert();");
    gold.append("\n        when.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __killFields() {}");
    gold.append("\n    @Override");
    gold.append("\n    public RTxLine __link() {");
    gold.append("\n      return this;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __invalidateIndex(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public void __pumpIndexEvents(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"Line\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __setId(int __id, boolean __force) {");
    gold.append("\n      if (__force) {");
    gold.append("\n        id.forceSet(__id);");
    gold.append("\n      } else {");
    gold.append("\n        id.set(__id);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxLine implements DeltaNode {");
    gold.append("\n    private DPrincipal __dwho;");
    gold.append("\n    private DString __dwhat;");
    gold.append("\n    private DInt64 __dwhen;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxLine() {");
    gold.append("\n      __dwho = new DPrincipal();");
    gold.append("\n      __dwhat = new DString();");
    gold.append("\n      __dwhen = new DInt64();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dwho.__memory();");
    gold.append("\n      __sum += __dwhat.__memory();");
    gold.append("\n      __sum += __dwhen.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public boolean show(RTxLine __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      DeltaPrivacyCache __policy_cache = (DeltaPrivacyCache) __writer.getCacheObject();");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __dwho.show(__item.who.get(), __obj.planField(\"who\"));");
    gold.append("\n      __dwhat.show(__item.what.get(), __obj.planField(\"what\"));");
    gold.append("\n      __dwhen.show(__item.when.get(), __obj.planField(\"when\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dwho.clear();");
    gold.append("\n      __dwhat.clear();");
    gold.append("\n      __dwhen.clear();");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  class DynCmp_RTxLine implements Comparator<RTxLine> {");
    gold.append("\n    private final CompareField[] parsed;");
    gold.append("\n    DynCmp_RTxLine(String instructions) {");
    gold.append("\n      this.parsed = DynCompareParser.parse(instructions);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxLine __a, RTxLine __b) {");
    gold.append("\n      for (CompareField field : parsed) {");
    gold.append("\n        int delta = 0;");
    gold.append("\n        switch (field.name) {");
    gold.append("\n          case \"id\":");
    gold.append("\n            delta = __a.id.compareTo(__b.id);");
    gold.append("\n            break;");
    gold.append("\n          case \"who\":");
    gold.append("\n            delta = __a.who.compareTo(__b.who);");
    gold.append("\n            break;");
    gold.append("\n          case \"what\":");
    gold.append("\n            delta = __a.what.compareTo(__b.what);");
    gold.append("\n            break;");
    gold.append("\n          case \"when\":");
    gold.append("\n            delta = __a.when.compareTo(__b.when);");
    gold.append("\n            break;");
    gold.append("\n        }");
    gold.append("\n        if (delta != 0) {");
    gold.append("\n          return field.desc ? -delta : delta;");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTxSay extends NtMessageBase {");
    gold.append("\n    private final RTxSay __this;");
    gold.append("\n    private String what = \"\";");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"what\");");
    gold.append("\n      __hash.hashString(this.what);");
    gold.append("\n      __hash.hashString(\"Say\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS_Say = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_Say;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTxSay(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustStartObject();");
    gold.append("\n      while (__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"what\":");
    gold.append("\n            this.what = __reader.readString();");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"what\");");
    gold.append("\n      __writer.writeString(what);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTxSay() { __this = this; }");
    gold.append("\n    private RTxSay(String what) {");
    gold.append("\n      this.__this = this;");
    gold.append("\n      this.what = what;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxSay implements DeltaNode {");
    gold.append("\n    private DString __dwhat;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxSay() {");
    gold.append("\n      __dwhat = new DString();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dwhat.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTxSay __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __dwhat.show(__item.what, __obj.planField(\"what\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dwhat.clear();");
    gold.append("\n      __code_cost += 1;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static String[] __INDEX_COLUMNS_R = new String[] {};");
    gold.append("\n  private class RTxR extends RxRecordBase<RTxR> {");
    gold.append("\n    private final RTxR __this;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxR(RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      this.__this = this;");
    gold.append("\n      id = new RxInt32(this, 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    private int __METH_3_foo() {");
    gold.append("\n      Runnable __measure_10 = __perf.measure(\"mt_foo\");");
    gold.append("\n      try {");
    gold.append("\n        __code_cost += 2;");
    gold.append("\n        __track(0);");
    gold.append("\n        return 1;");
    gold.append("\n      } finally {");
    gold.append("\n        __measure_10.run();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = super.__memory();");
    gold.append("\n      __sum += id.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_R;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public Object __fieldOf(String __name) {");
    gold.append("\n      switch (__name) {");
    gold.append("\n        case \"id\":");
    gold.append("\n          return id;");
    gold.append("\n        default:");
    gold.append("\n          return null;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __settle(Set<Integer> __viewers) {");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __insert(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __patch(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      id.__dump(__writer);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __forward.writeObjectFieldIntro(__name);");
    gold.append("\n        __forward.beginObject();");
    gold.append("\n        __reverse.writeObjectFieldIntro(__name);");
    gold.append("\n        __reverse.beginObject();");
    gold.append("\n        id.__commit(\"id\", __forward, __reverse);");
    gold.append("\n        __forward.endObject();");
    gold.append("\n        __reverse.endObject();");
    gold.append("\n        __lowerDirtyCommit();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __killFields() {}");
    gold.append("\n    @Override");
    gold.append("\n    public RTxR __link() {");
    gold.append("\n      return this;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __invalidateIndex(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public void __pumpIndexEvents(TablePubSub __pubsub) {}");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"R\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __setId(int __id, boolean __force) {");
    gold.append("\n      if (__force) {");
    gold.append("\n        id.forceSet(__id);");
    gold.append("\n      } else {");
    gold.append("\n        id.set(__id);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxR implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxR() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public boolean show(RTxR __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      DeltaPrivacyCache __policy_cache = (DeltaPrivacyCache) __writer.getCacheObject();");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n      return true;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __code_cost += 0;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  class DynCmp_RTxR implements Comparator<RTxR> {");
    gold.append("\n    private final CompareField[] parsed;");
    gold.append("\n    DynCmp_RTxR(String instructions) {");
    gold.append("\n      this.parsed = DynCompareParser.parse(instructions);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxR __a, RTxR __b) {");
    gold.append("\n      for (CompareField field : parsed) {");
    gold.append("\n        int delta = 0;");
    gold.append("\n        switch (field.name) {");
    gold.append("\n          case \"id\":");
    gold.append("\n            delta = __a.id.compareTo(__b.id);");
    gold.append("\n            break;");
    gold.append("\n        }");
    gold.append("\n        if (delta != 0) {");
    gold.append("\n          return field.desc ? -delta : delta;");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n      return 0;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTx_AnonObjConvert_2 extends NtMessageBase {");
    gold.append("\n    private final RTx_AnonObjConvert_2 __this;");
    gold.append("\n    private String what = \"\";");
    gold.append("\n    private long when = 0L;");
    gold.append("\n    private NtPrincipal who = NtPrincipal.NO_ONE;");
    gold.append("\n    public void __hash(HashBuilder __hash) {");
    gold.append("\n      __hash.hashString(\"what\");");
    gold.append("\n      __hash.hashString(this.what);");
    gold.append("\n      __hash.hashString(\"when\");");
    gold.append("\n      __hash.hashLong(this.when);");
    gold.append("\n      __hash.hashString(\"who\");");
    gold.append("\n      __hash.hashNtPrincipal(this.who);");
    gold.append("\n      __hash.hashString(\"anonymous\");");
    gold.append("\n    }");
    gold.append("\n    private static String[] __INDEX_COLUMNS__AnonObjConvert_2 = new String[] {};");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS__AnonObjConvert_2;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {};");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2(JsonStreamReader __reader) {");
    gold.append("\n      __this = this;");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.mustStartObject();");
    gold.append("\n      while (__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"what\":");
    gold.append("\n            this.what = __reader.readString();");
    gold.append("\n            break;");
    gold.append("\n          case \"when\":");
    gold.append("\n            this.when = __reader.readLong();");
    gold.append("\n            break;");
    gold.append("\n          case \"who\":");
    gold.append("\n            this.who = __reader.readNtPrincipal();");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"what\");");
    gold.append("\n      __writer.writeString(what);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"when\");");
    gold.append("\n      __writer.writeLong(when);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"who\");");
    gold.append("\n      __writer.writeNtPrincipal(who);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_2() { __this = this; }");
    gold.append("\n    private RTx_AnonObjConvert_2(String what, long when, NtPrincipal who) {");
    gold.append("\n      this.__this = this;");
    gold.append("\n      this.what = what;");
    gold.append("\n      this.when = when;");
    gold.append("\n      this.who = who;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx_AnonObjConvert_2 implements DeltaNode {");
    gold.append("\n    private DString __dwhat;");
    gold.append("\n    private DInt64 __dwhen;");
    gold.append("\n    private DPrincipal __dwho;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx_AnonObjConvert_2() {");
    gold.append("\n      __dwhat = new DString();");
    gold.append("\n      __dwhen = new DInt64();");
    gold.append("\n      __dwho = new DPrincipal();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dwhat.__memory();");
    gold.append("\n      __sum += __dwhen.__memory();");
    gold.append("\n      __sum += __dwho.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx_AnonObjConvert_2 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __dwhat.show(__item.what, __obj.planField(\"what\"));");
    gold.append("\n      __dwhen.show(__item.when, __obj.planField(\"when\"));");
    gold.append("\n      __dwho.show(__item.who, __obj.planField(\"who\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void clear() {");
    gold.append("\n      __dwhat.clear();");
    gold.append("\n      __dwhen.clear();");
    gold.append("\n      __dwho.clear();");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        clear();");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private int __FUNC_0_foo() {");
    gold.append("\n    Runnable __measure_11 = __perf.measure(\"fn_foo\");");
    gold.append("\n    try {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(1);");
    gold.append("\n      return 123;");
    gold.append("\n    } finally {");
    gold.append("\n      __measure_11.run();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private int __FUNC_1_g(int x, int y) {");
    gold.append("\n    Runnable __measure_12 = __perf.measure(\"fn_g\");");
    gold.append("\n    try {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(0);");
    gold.append("\n      return x + y;");
    gold.append("\n    } finally {");
    gold.append("\n      __measure_12.run();");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  public static HashMap<String, HashMap<String, Object>> __services() {");
    gold.append("\n    HashMap<String, HashMap<String, Object>> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __link(ServiceRegistry __registry) {}");
    gold.append("\n  @Override");
    gold.append("\n  public void __executeServiceCalls(boolean cancel) {}");
    gold.append("\n  @Override");
    gold.append("\n  public String __getViewStateFilter() {");
    gold.append("\n    return \"[]\";");
    gold.append("\n  }");
    gold.append("\n  private void handleChannelMessage_say(CoreRequestContext __context, NtPrincipal __who, RTxSay what) throws AbortMessageException {");
    gold.append("\n    __code_cost += 3;");
    gold.append("\n    __track(2);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxLine> _AutoRef13 = _chat;");
    gold.append("\n      RTx_AnonObjConvert_2 _AutoExpr15 = new RTx_AnonObjConvert_2(what.what, __timeNow(), __who);");
    gold.append("\n      RTxLine _CreateRef14 = _AutoRef13.make();");
    gold.append("\n      __code_cost += 4;");
    gold.append("\n      _CreateRef14.what.set(_AutoExpr15.what);");
    gold.append("\n      _CreateRef14.when.set(_AutoExpr15.when);");
    gold.append("\n      _CreateRef14.who.set(_AutoExpr15.who);");
    gold.append("\n    }");
    gold.append("\n    __track(3);");
    gold.append("\n    (_chat.iterate(false).orderBy(false, __ORDER_Line_when_d).skip(true, 50)).map((__item) -> { __item.__delete(); });");
    gold.append("\n");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected boolean __is_direct_channel(String channel) {");
    gold.append("\n    switch (channel) {");
    gold.append("\n      case \"say\":");
    gold.append("\n        return true;");
    gold.append("\n    default:");
    gold.append("\n      return false;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __handle_direct(CoreRequestContext __context, String __channel, Object __message) throws AbortMessageException {");
    gold.append("\n    switch (__channel) {");
    gold.append("\n      case \"say\":");
    gold.append("\n        handleChannelMessage_say(__context, __context.who, (RTxSay) __message);");
    gold.append("\n        return;");
    gold.append("\n      default:");
    gold.append("\n        return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask __task) {");
    gold.append("\n    switch (__task.channel) {");
    gold.append("\n      case \"say\":");
    gold.append("\n        __task.setAction(() -> handleChannelMessage_say(__task.context(__getKey()), __task.who, (RTxSay)(__task.message)));");
    gold.append("\n        return;");
    gold.append("\n      default:");
    gold.append("\n        return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message(String __channel, JsonStreamReader __reader) {");
    gold.append("\n    switch (__channel) {");
    gold.append("\n      case \"say\":");
    gold.append("\n        return new RTxSay(__reader);");
    gold.append("\n      default:");
    gold.append("\n        __reader.skipValue();");
    gold.append("\n        return NtMessageBase.NULL;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __bindReplication() {}");
    gold.append("\n  @Override");
    gold.append("\n  public String __metrics() { return \"{}\"; }");
    gold.append("\n  @Override");
    gold.append("\n  public void __debug(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.writeObjectFieldIntro(\"tables\");");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"_chat\");");
    gold.append("\n    _chat.debug(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __open_channel(String name) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String __auth(CoreRequestContext __context, String username, String password) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  public AuthResponse __authpipe(CoreRequestContext __context, String __message) {");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __password(CoreRequestContext __context, String __pw) {}");
    gold.append("\n  @Override");
    gold.append("\n  public void __make_cron_progress() {}");
    gold.append("\n  @Override");
    gold.append("\n  protected WebResponse __get_internal(CoreRequestContext __context, WebGet __request) throws AbortMessageException {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected WebResponse __put_internal(CoreRequestContext __context, WebPut __request) throws AbortMessageException {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected WebResponse __delete_internal(CoreRequestContext __context, WebDelete __request) throws AbortMessageException {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public WebResponse __options(CoreRequestContext __context, WebGet __request) {");
    gold.append("\n    WebPath __path = new WebPath(__request.uri);");
    gold.append("\n    return null;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  public static boolean __onCanCreate__0(StaticState __static_state, NtPrincipal __who, CoreRequestContext __context) {");
    gold.append("\n    return true;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent__0(StaticState __static_state, NtPrincipal __who, CoreRequestContext __context) {");
    gold.append("\n    return true;");
    gold.append("\n  }");
    gold.append("\n  public boolean __onConnected__0(CoreRequestContext __context, NtPrincipal __who) {");
    gold.append("\n    __code_cost += 2;");
    gold.append("\n    __track(4);");
    gold.append("\n    return true;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(CoreRequestContext __context) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    StaticState __static_state = new StaticState();");
    gold.append("\n    if (__onCanCreate__0(__static_state, __context.who, __context)) {");
    gold.append("\n      __result = true;");
    gold.append("\n    } else {");
    gold.append("\n      return false;");
    gold.append("\n    }");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(CoreRequestContext __context) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    StaticState __static_state = new StaticState();");
    gold.append("\n    if (__onCanInvent__0(__static_state, __context.who, __context)) {");
    gold.append("\n      __result = true;");
    gold.append("\n    } else {");
    gold.append("\n      return false;");
    gold.append("\n    }");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(CoreRequestContext __context) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onLoad() {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(CoreRequestContext __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(CoreRequestContext __cvalue, NtAsset __pvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __delete(CoreRequestContext __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(CoreRequestContext __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    if (__onConnected__0(__cvalue, __cvalue.who)) __result = true;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(CoreRequestContext __cvalue) {}");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    __map.put(\"maximum_history\", 250);");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(CoreRequestContext _c, NtMessageBase _m) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  private final static Comparator<RTxLine> __ORDER_Line_when_d = new Comparator<RTxLine>() {");
    gold.append("\n    @Override");
    gold.append("\n    public int compare(RTxLine __a, RTxLine __b) {");
    gold.append("\n      return -__a.when.compareTo(__b.when);");
    gold.append("\n    }");
    gold.append("\n  };");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--=[LivingDocumentFactory COMPILING]=---");
    gold.append("\n--=[LivingDocumentFactory MADE]=---");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"__Root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{\"_chat\":{\"type\":{\"nature\":\"reactive_table\",\"record_name\":\"Line\"},\"privacy\":\"private\"},\"chat\":{\"type\":{\"nature\":\"native_list\",\"type\":{\"nature\":\"reactive_ref\",\"ref\":\"Line\"}},\"privacy\":\"public\"}}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}},\"Line\":{\"nature\":\"reactive_record\",\"name\":\"Line\",\"fields\":{\"id\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"private\"},\"who\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"principal\"},\"privacy\":\"public\"},\"what\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"string\"},\"privacy\":\"public\"},\"when\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"long\"},\"privacy\":\"public\"}}},\"Say\":{\"nature\":\"native_message\",\"name\":\"Say\",\"anonymous\":false,\"fields\":{\"what\":{\"type\":{\"nature\":\"native_value\",\"type\":\"string\"},\"privacy\":\"public\"}}},\"R\":{\"nature\":\"reactive_record\",\"name\":\"R\",\"fields\":{\"id\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"private\"}}},\"_AnonObjConvert_2\":{\"nature\":\"native_message\",\"name\":\"_AnonObjConvert_2\",\"anonymous\":true,\"fields\":{\"what\":{\"type\":{\"nature\":\"native_value\",\"type\":\"string\"},\"privacy\":\"public\"},\"when\":{\"type\":{\"nature\":\"native_value\",\"type\":\"long\"},\"privacy\":\"public\"},\"who\":{\"type\":{\"nature\":\"native_value\",\"type\":\"secure<principal>\"},\"privacy\":\"public\"}}}},\"channels\":{\"say\":\"Say\"},\"channels-privacy\":{\"say\":{\"open\":false,\"privacy\":[]}},\"constructors\":[],\"labels\":[]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\",\"key\":\"0\",\"origin\":\"origin\",\"ip\":\"ip\"}-->{\"__constructed\":true,\"__entropy\":\"-4962768465676381896\",\"__messages\":null,\"__seq\":1} need:false in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"25\"} need:false in:0");
    gold.append("\nCPU:0");
    gold.append("\nMEMORY:538");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"50\"} need:false in:0");
    gold.append("\nNO_ONE: CREATED PRIVATE VIEW");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":3}");
    gold.append("\n{\"command\":\"connect\",\"timestamp\":\"75\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"key\":\"key\",\"origin\":\"phase\",\"ip\":\"ip\"}-->{\"__seq\":5,\"__entropy\":\"-8929183248358367000\",\"__connection_id\":1,\"__time\":\"75\",\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"}},\"__messages\":null} need:false in:0");
    gold.append("\nNO_ONE|SUCCESS:4");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":5}");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seq\":6,\"__entropy\":\"488730542833106255\",\"__time\":\"100\"} need:false in:0");
    gold.append("\nRANDO: CREATED PRIVATE VIEW");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":6}");
    gold.append("\n+ RANDO DELTA:{\"seq\":6}");
    gold.append("\n{\"command\":\"connect\",\"timestamp\":\"125\",\"who\":{\"agent\":\"rando\",\"authority\":\"random-place\"},\"key\":\"key\",\"origin\":\"phase\",\"ip\":\"ip\"}-->{\"__seq\":8,\"__entropy\":\"-4023469995120514721\",\"__connection_id\":2,\"__time\":\"125\",\"__clients\":{\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__messages\":null} need:false in:0");
    gold.append("\nRANDO|SUCCESS:7");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":8}");
    gold.append("\n+ RANDO DELTA:{\"seq\":8}");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"150\"}-->{\"__messages\":null,\"__seq\":9,\"__entropy\":\"-652523483647487500\",\"__time\":\"150\"} need:false in:0");
    gold.append("\nRANDO|SUCCESS:9");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":9}");
    gold.append("\n+ RANDO DELTA:{\"seq\":9}");
    gold.append("\nMEMORY:656");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__snapshot\":\"0/0\",\"_chat\":{},\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":9,\"__entropy\":\"-652523483647487500\",\"__auto_future_id\":0,\"__connection_id\":2,\"__message_id\":0,\"__time\":\"150\",\"__timezone\":\"UTC\",\"__auto_table_row_id\":0,\"__auto_gen\":0,\"__auto_cache_id\":0,\"__cache\":{},\"__webTaskId\":0,\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"},\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__webqueue\":{},\"__replication\":{}}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{}");
    gold.append("\n--METRIC RESULTS-----------------------------------");
    gold.append("\n{\"__snapshot\":\"0/0\",\"_chat\":{},\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":9,\"__entropy\":\"-652523483647487500\",\"__auto_future_id\":0,\"__connection_id\":2,\"__message_id\":0,\"__time\":\"150\",\"__timezone\":\"UTC\",\"__auto_table_row_id\":0,\"__auto_gen\":0,\"__auto_cache_id\":0,\"__cache\":{},\"__webTaskId\":0,\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"},\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__webqueue\":{},\"__replication\":{}}");
    gold.append("\n{\"__snapshot\":\"0/0\",\"_chat\":{},\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":9,\"__entropy\":\"-652523483647487500\",\"__auto_future_id\":0,\"__connection_id\":2,\"__message_id\":0,\"__time\":\"150\",\"__timezone\":\"UTC\",\"__auto_table_row_id\":0,\"__auto_gen\":0,\"__auto_cache_id\":0,\"__cache\":{},\"__webTaskId\":0,\"__clients\":{\"0\":{\"agent\":\"?\",\"authority\":\"?\"},\"1\":{\"agent\":\"rando\",\"authority\":\"random-place\"}},\"__webqueue\":{},\"__replication\":{}}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
}
