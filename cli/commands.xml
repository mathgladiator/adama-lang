<?xml version="1.0"?>
<cli output-path="./cli/src/main/java/org/adamalang/cli/router" test-output-path="./cli/src/test/java/org/adamalang/cli/router" package="org.adamalang.cli.router" docs="./reference/src/reference/cli.md">
    <!-- define all the arguments -->
    <arg-definition name="space" type="string" short="s">
        <documentation>
            A 'space' is a collection of documents with the same schema and logic; space names must have a length greater than 3 and less than 128, have valid characters are lower-case alphanumeric or hyphens, and double hyphens (--) are not allowed.
        </documentation>
    </arg-definition>
    <!-- May have to represent the actual representation-->

    <arg-definition name="rxhtml-path" type="string" short="r">
        <documentation>
            The path to scan for RxHTML files.
        </documentation>
    </arg-definition>

    <arg-definition name="mobile-config" type="string" short="mc">
        <documentation>
            The configuration file for a mobile app
        </documentation>
    </arg-definition>

    <arg-definition name="types" type="string" short="ty">
        <documentation>
            The path for RxHTML to scan for reflected types.
        </documentation>
    </arg-definition>

    <arg-definition name="environment" type="string" short="e">
        <documentation>
            The environment label for filtering things out.
        </documentation>
    </arg-definition>

    <arg-definition name="scenario" type="string" short="sn">
        <documentation>
            A canary scenario
        </documentation>
    </arg-definition>

    <arg-definition name="microverse" type="string" short="mv">
        <documentation>
            The microverse plan which defines the local devbox solo mode.
        </documentation>
    </arg-definition>

    <arg-definition name="debugger" type="bool" short="dbg">
        <documentation>
            Is the online debugger available
        </documentation>
    </arg-definition>

    <arg-definition name="min-size" type="int" short="ms">
        <documentation>
            Minimum size for considering a recovered json object.
        </documentation>
    </arg-definition>

    <arg-definition name="asset-path" type="string" short="a">
        <documentation>
            The path to map for static assets.
        </documentation>
    </arg-definition>

    <arg-definition name="jquery" type="string" short="j">
        <documentation>
            A json path (field0.field1....fieldN)
        </documentation>
    </arg-definition>

    <arg-definition name="local-libadama-path" type="string" short="lap">
        <documentation>
            The path to the libadama.js source code for direct linkage.
        </documentation>
    </arg-definition>

    <arg-definition name="base" type="string" short="b">
        <documentation>
            The base directory for working with edhtml.
        </documentation>
    </arg-definition>

    <arg-definition name="includes" type="string" short="in">
        <documentation>
            The rx.html includes
        </documentation>
    </arg-definition>

    <arg-definition name="skipuse" type="string" short="sk">
        <documentation>
            Skip the use elements.
        </documentation>
    </arg-definition>

    <arg-definition name="gen" type="string" short="g">
        <documentation>
            The factory for generating stuff
        </documentation>
    </arg-definition>

    <arg-definition name="file" type="string" short="f">
        <documentation>
            A file.
        </documentation>
    </arg-definition>

    <arg-definition name="directory" type="string" short="d">
        <documentation>
            A directory.
        </documentation>
    </arg-definition>

    <arg-definition name="plan" type="string" short="p">
        <documentation>
            A deployment plan; see https://book.adama-platform.com/reference/deployment-plan.html .
        </documentation>
    </arg-definition>

    <arg-definition name="gc" type="boolean" short="g">
        <documentation>
            Delete assets that were not present in this upload.
        </documentation>
    </arg-definition>

    <arg-definition name="instrument" type="boolean" short="in">
        <documentation>
            Instrument the plan
        </documentation>
    </arg-definition>

    <arg-definition name="limit" type="int" short="l">
        <documentation>
            Limit the returned items.
        </documentation>
    </arg-definition>

    <arg-definition name="key" type="string" short="k">
        <documentation>
            A document key; keys must have a length greater than 0 and less than 512; valid characters are A-Z, a-z, 0-9, underscore (_), hyphen (-i), or period (.).
        </documentation>
    </arg-definition>

    <arg-definition name="route" type="boolean" short="re">
        <documentation>
            Should the domain route to the key's handler.
        </documentation>
    </arg-definition>

    <arg-definition name="marker" type="string" short="m">
        <documentation>
            Items greater than the marker are returned.
        </documentation>
    </arg-definition>

    <arg-definition name="prefix" type="string" short="p">
        <documentation>
            Items that have this prefixed are included
        </documentation>
    </arg-definition>

    <arg-definition name="output" type="string" short="o">
        <documentation>
            A file (or directory) to output to.
        </documentation>
    </arg-definition>

    <arg-definition name="email" type="string" short="e">
        <documentation>
            An email address.
        </documentation>
    </arg-definition>

    <arg-definition name="role" type="string" short="r">
        <documentation>
            Options are 'developer' or 'none'.
        </documentation>
    </arg-definition>

    <arg-definition name="validate" type="string" short="v">
        <documentation>
            Should the plan be validated.
        </documentation>
    </arg-definition>

    <arg-definition name="authority" type="string" short="a">
        <documentation>
            The name or key of a keystore.
        </documentation>
    </arg-definition>

    <arg-definition name="product" type="string" short="p">
        <documentation>
            Product configuration for native apps on the platform
        </documentation>
    </arg-definition>

    <arg-definition name="agent" type="string" short="ag">
        <documentation>
            The user id or agent part of a principal.
        </documentation>
    </arg-definition>

    <arg-definition name="root" type="string" short="r">
        <documentation>
            Placeholder
        </documentation>
    </arg-definition>

    <arg-definition name="keystore" type="string" short="k">
        <documentation>
            A special JSON encoded keystore holding only public keys.
        </documentation>
    </arg-definition>

    <arg-definition name="priv" type="string" short="p">
        <documentation>
            A special JSON encoded private key
        </documentation>
    </arg-definition>

    <arg-definition name="dump-to" type="string" short="d">
        <documentation>
            Dump the output/result to the given file
        </documentation>
    </arg-definition>

    <arg-definition name="port" type="string" short="p">
        <documentation>
            Port for a server
        </documentation>
    </arg-definition>

    <arg-definition name="language-port" type="string" short="p">
        <documentation>
            Port for the language server
        </documentation>
    </arg-definition>

    <arg-definition name="main" type="string" short="m">
        <documentation>
            The main/primary adama file.
        </documentation>
    </arg-definition>

    <arg-definition name="input" type="string" short="i">
        <documentation>
            An input file
        </documentation>
    </arg-definition>

    <arg-definition name="book-template" type="string" short="bt">
        <documentation>
            Template for generating the book
        </documentation>
    </arg-definition>

    <arg-definition name="book-merge" type="string" short="bm">
        <documentation>
            Files to merge into the book
        </documentation>
    </arg-definition>

    <arg-definition name="title" type="string" short="tt">
        <documentation>
            The title of the diagram
        </documentation>
    </arg-definition>


    <arg-definition name="arg" type="string" short="aa">
        <documentation>
            The constructor argument.
        </documentation>
    </arg-definition>

    <arg-definition name="entropy" type="string" short="e">
        <documentation>
            A random seed.
        </documentation>
    </arg-definition>

    <arg-definition name="name" type="string"  short="n">
        <documentation>
            Placeholder
        </documentation>
    </arg-definition>

    <arg-definition name="domain" type="string" short="d">
        <documentation>
            The domain name
        </documentation>
    </arg-definition>

    <arg-definition name="cert" type="string" short="c">
        <documentation>
            Placeholder
        </documentation>
    </arg-definition>

    <arg-definition name="auto" type="string" short="a">
        <documentation>
            Should the Adama Platform automatically get a domain.
        </documentation>
    </arg-definition>

    <arg-definition name="type" type="string" short="t" >
        <documentation>
            Placeholder
        </documentation>
    </arg-definition>

    <arg-definition name="errors" type="string" short="e">
        <documentation>
            Placeholder
        </documentation>
    </arg-definition>

    <arg-definition name="imports" type="string" short="i">
        <documentation>
            A directory containing adama files to import into the main
        </documentation>
    </arg-definition>

    <arg-definition name="target" type="string" short="tg">
        <documentation>
            A target is a combination of ip address and port.
        </documentation>
    </arg-definition>

    <arg-definition name="preserve-view" type="bool" short="pv">
        <documentation>
            Whether or not to preserve (take a snapshot) of the viewstate before automatically reloading (default 'true').
        </documentation>
    </arg-definition>

    <!-- groups collect commands -->
    <group name="space" alt-name="spaces">
        <documentation>
            Provides command related to working with space collections...
        </documentation>
        <command name="create">
            <documentation>
                Creates a new space
            </documentation>
            <arg name="space" />
        </command>

        <command name="metrics" output="json">
            <documentation>
                Get a metric report for the space and the documents that share the prefix
            </documentation>
            <arg name="space" />
            <arg name="prefix" default="null" />
        </command>

        <command name="delete">
            <documentation>
                Deletes an empty space
            </documentation>
            <arg name="space" />
        </command>

        <command name="deploy">
            <documentation>
                Deploy a plan to a space
            </documentation>
            <arg name="space" />
            <arg name="plan" default="null" />
            <arg name="file" default="null" />
        </command>

        <command name="set-rxhtml">
            <documentation>
                Set the frontend RxHTML forest
            </documentation>
            <arg name="space" />
            <arg name="file" />
        </command>

        <command name="get-rxhtml">
            <documentation>
                Get the frontend RxHTML forest
            </documentation>
            <arg name="space" />
            <arg name="output" />
        </command>

        <command name="set-policy">
            <documentation>
                Set the space's access control policy
            </documentation>
            <arg name="space" />
            <arg name="file" />
        </command>

        <command name="get-policy">
            <documentation>
                Get the access control policy for the space
            </documentation>
            <arg name="space" />
            <arg name="output" />
        </command>

        <command name="upload" output="json">
            <documentation>
                Placeholder
            </documentation>
            <arg name="space" />
            <arg name="gc" default="no" />
            <arg name="file" default="null" />
            <arg name="directory" default="null" />
        </command>

        <command name="get">
            <documentation>
                Get a space's plan
            </documentation>
            <arg name="space" />
            <arg name="output" />
        </command>

        <command name="list" output="json">
            <documentation>
                List spaces available to your account
            </documentation>
            <arg name="marker" default="" />
            <arg name="limit" default="100" />
        </command>

        <command name="developers" output="json">
            <documentation>
                List developers for the given space
            </documentation>
            <arg name="space" />
        </command>

        <command name="reflect">
            <documentation>
                Get a file of the reflection of a space
            </documentation>
            <arg name="space" />
            <arg name="key" default="null" />
            <arg name="output" />
        </command>

        <command name="set-role">
            <documentation>
                Set the role of another developer
            </documentation>
            <arg name="space" />
            <arg name="email" />
            <arg name="role" default="none" />
        </command>

        <command name="generate-key">
            <documentation>
                Generate a server-side key to use for storing secrets
            </documentation>
            <arg name="space" />
        </command>

        <command name="encrypt-secret" interactive="true">
            <documentation>
                Encrypt a secret to store within code
            </documentation>
            <arg name="space" />
        </command>

        <command name="encrypt-priv">
            <documentation>
                Encrypt a private key to store within code
            </documentation>
            <arg name="space" />
            <arg name="priv" default="private.key.json" />
        </command>
    </group>

    <group name="authority">
        <documentation>
            Manage authorities
        </documentation>
        <command name="create" output="json">
            <documentation>
                Creates a new authority
            </documentation>
        </command>

        <command name="set">
            <documentation>
                Set public keys to an authority
            </documentation>
            <arg name="authority" />
            <arg name="keystore" />
        </command>

        <command name="get">
            <documentation>
                Get released public keys for an authority
            </documentation>
            <arg name="authority" />
            <arg name="keystore" />
        </command>

        <command name="destroy">
            <documentation type="warn">
                Destroy an authority
            </documentation>
            <arg name="authority" />
        </command>

        <command name="list" output="json">
            <documentation>
                List authorities this developer owns
            </documentation>
        </command>

        <command name="create-local">
            <documentation type="warn">
                Make a new set of public keys
            </documentation>
            <arg name="authority" />
            <arg name="keystore" default="keystore.json" />
            <arg name="priv" default="private.key.json" />
        </command>

        <command name="append-local">
            <documentation type="warn">
                Append a new public key to the public key file
            </documentation>
            <arg name="authority" />
            <arg name="keystore" default="keystore.json" />
            <arg name="priv" />
        </command>

        <command name="sign" output="json">
            <documentation>
                Sign an agent with a local private key
            </documentation>
            <arg name="key" />
            <arg name="agent" />
            <arg name="validate" default="null" />
        </command>
    </group>

    <group name="account">
        <documentation>
            Manage your account
        </documentation>
        <command name="set-password" interactive="true">
            <documentation>
                Create a password to be used on web
            </documentation>
        </command>
    </group>

    <group name="code">
        <documentation>
            Local developer tools
        </documentation>

        <command name="lsp">
            <documentation>
                Spin up a single threaded language service protocol server
            </documentation>
            <arg name="port" default="2423"/>
        </command>

        <command name="validate-plan">
            <documentation>
                Validates a deployment plan (locally) for speed
            </documentation>
            <arg name="plan" />
        </command>

        <command name="bundle-plan">
            <documentation>
                Bundle the main and imports into a single deployment plan.
            </documentation>
            <arg name="output" />
            <arg name="main" />
            <arg name="instrument" default="false" />
            <arg name="imports" default="backend" />
        </command>

        <command name="compile-file">
            <documentation>
                Compiles the adama file and shows any problems
            </documentation>
            <arg name="file" />
            <arg name="imports" default="backend" />
            <arg name="dump-to" default="null" />
        </command>

        <command name="format">
            <documentation>
                Format the file or directory recursively (and inline updates)
            </documentation>
            <arg name="file" default="null" />
        </command>

        <command name="reflect-dump">
            <documentation>
                Compiles the adama file and dumps the reflection json
            </documentation>
            <arg name="file" />
            <arg name="imports" default="backend" />
            <arg name="dump-to" default="null" />
        </command>

        <command name="diagram">
            <documentation>
                Convert a reflection JSON into a mermaid diagram source
            </documentation>
            <arg name="input" default="reflected.json" />
            <arg name="output" default="mermaid.mmd" />
            <arg name="title" default="Schema" />
        </command>

    </group>

    <group name="contrib">
        <documentation>
            Open source contributor tools
        </documentation>

        <command name="make-book">
            <documentation>
                Compile Adama's Book
            </documentation>
            <arg name="input" />
            <arg name="output" />
            <arg name="book-template" />
            <arg name="book-merge" />
        </command>

        <command name="tests-adama">
            <documentation>
                Generate tests for Adama Language.
            </documentation>
            <arg name="input" default="./test_code"/>
            <arg name="output" default="./src/test/java/org/adamalang/translator" />
            <arg name="errors" default="./error-messages.csv" />
        </command>

        <command name="tests-rxhtml">
            <documentation>
                Generate tests for RxHTML.
            </documentation>
            <arg name="input" default="./test_templates"/>
            <arg name="output" default="./src/test/java/org/adamalang/rxhtml" />
        </command>

        <command name="make-cli">
            <documentation>
                Generate the command line router
            </documentation>
        </command>

        <command name="make-codec">
            <documentation>
                Generates the networking codec
            </documentation>
        </command>
        <command name="make-embed">
            <documentation>
                Generates the embedded templates
            </documentation>
        </command>
        <command name="make-api">
            <documentation>
                Produces api files for SaaS and documentation for the WebSocket low level API.
            </documentation>
        </command>
        <command name="bundle-js">
            <documentation>
                Bundles the libadama.js into the webserver
            </documentation>
        </command>
        <command name="make-et">
            <documentation>
                Generates the error table which provides useful insight to issues
            </documentation>
        </command>
        <command name="copyright">
            <documentation>
                Sprinkle the copyright everywhere.
            </documentation>
        </command>
        <command name="str-temp">
            <documentation>
                Generate string templates
            </documentation>
        </command>
        <command name="version">
            <documentation>
                Create the version number for the platform
            </documentation>
        </command>
    </group>

    <group name="database">
        <documentation>
            Work with production databases for the global service.
        </documentation>
        <command name="configure">
            <documentation>
                Update the configuration
            </documentation>
        </command>
        <command name="install">
            <documentation>
                Install the tables on a monolithic database
            </documentation>
        </command>
        <command name="make-reserved">
            <documentation>
                Create reserved spaces
            </documentation>
            <arg name="email" />
            <arg name="space" />
        </command>
        <command name="migrate">
            <documentation>
                Migrate data from 'db' to 'nextdb'
            </documentation>
        </command>
    </group>

    <group name="document" alt-name="documents">
        <documentation>
            Interact with documents within a space.
        </documentation>

        <command name="connect">
            <documentation>
                Connect to a document
            </documentation>
            <arg name="space" />
            <arg name="key" />
        </command>

        <command name="download-archive">
            <documentation>
                Download the latest archive backup
            </documentation>
            <arg name="space" />
            <arg name="key" />
            <arg name="output" />
        </command>

        <command name="list-push-tokens" output="json">
            <documentation>
                List push tokens for a specific agent within a document's authority
            </documentation>
            <arg name="space" />
            <arg name="key" />
            <arg name="domain" />
            <arg name="agent" />
        </command>

        <command name="create">
            <documentation>
                Create a document
            </documentation>
            <arg name="space" />
            <arg name="key" />
            <arg name="arg" />
            <arg name="entropy" default="null"/>
        </command>

        <command name="delete">
            <documentation>
                Delete a document
            </documentation>
            <arg name="space" />
            <arg name="key" />
        </command>

        <command name="list" output="json">
            <documentation>
                List documents
            </documentation>
            <arg name="space" />
            <arg name="marker" default="null" />
            <arg name="limit" default="1000" />
        </command>

        <command name="attach" output="json">
            <documentation>
                Attach an asset to a document
            </documentation>
            <arg name="space" />
            <arg name="key" />
            <arg name="file" />
            <arg name="name" default="null" />
            <arg name="type" default="null" />
        </command>

    </group>

    <group name="ops">
        <documentation>
            Operational tasks
        </documentation>
        <command name="compact">
            <documentation>
                Compact an archive to a single JSON file
            </documentation>
            <arg name="input" />
            <arg name="output" />
        </command>

        <command name="forensics">
            <documentation>
                Dive into a data store and recover snapshots
            </documentation>
            <arg name="input" />
            <arg name="output" />
            <arg name="min-size" default="0" />
        </command>

        <command name="explain">
            <documentation>
                Explain the history of a value at a path
            </documentation>
            <arg name="input" />
            <arg name="jquery" />
        </command>
    </group>

    <group name="domain" alt-name="domains">
        <documentation>
            Manage custom domains
        </documentation>
        <command name="map">
            <documentation>
                Map a domain to a space
            </documentation>
            <arg name="domain" />
            <arg name="space" />
            <arg name="cert" default="null" />
            <arg name="key" default="null" />
            <arg name="route" default="false" />
            <arg name="auto" default="true" />
        </command>

        <command name="configure">
            <documentation>
                Provide a product configuration to define various aspects of a product by domain
            </documentation>
            <arg name="domain" />
            <arg name="product" />
        </command>

        <command name="list" output="json">
            <documentation>
                List domains
            </documentation>
        </command>
        <command name="unmap">
            <documentation>
                Unmap a domain from a space
            </documentation>
            <arg name="domain" />

        </command>

    </group>

    <group name="frontend">
        <documentation>
            Frontend tools (rxhtml)
        </documentation>
        <command name="rxhtml">
            <documentation>
                Compile an rxhtml template set
            </documentation>
            <arg name="input" />
            <arg name="output" />
            <arg name="environment" default="production" />
            <arg name="types" default="types" />
        </command>
        <command name="dev-server">
            <documentation>
                Host the working directory as a webserver
            </documentation>
            <arg name="rxhtml-path" default="frontend" />
            <arg name="asset-path" default="assets" />
            <arg name="microverse" default="local.verse.json" />
            <arg name="debugger" default="true" />
            <arg name="local-libadama-path" default="null" />
            <arg name="environment" default="test" />
            <arg name="preserve-view" default="true" />
            <arg name="types" default="types" />
        </command>
        <command name="set-libadama">
            <documentation>
                Update your config to have a local-libadama-path-default which will be used in 'dev-server' when --local-libadama-path is not specified.
            </documentation>
            <arg name="local-libadama-path" default="null" />
        </command>
        <command name="make-200">
            <documentation>
                Create a 200.html
            </documentation>
            <arg name="rxhtml-path" default="." />
            <arg name="output" default="200.html" />
            <arg name="environment" default="production" />
            <arg name="types" default="types" />
        </command>
        <command name="bundle">
            <documentation>
                Bundle many *.rx.html into one big one.
            </documentation>
            <arg name="rxhtml-path" default="frontend" />
            <arg name="output" default="frontend.rx.html" />
        </command>
        <command name="validate">
            <documentation>
                (Temporary) Runs a deeper check on an RxHTML forest
            </documentation>
            <arg name="rxhtml-path" default="frontend" />
            <arg name="types" default="types" />
        </command>
        <command name="mobile-capacitor">
            <documentation>
                Create a shell for https://capacitorjs.com/
            </documentation>
            <arg name="rxhtml-path" default="frontend" />
            <arg name="asset-path" default="assets" />
            <arg name="local-libadama-path" />
            <arg name="types" default="types" />
            <arg name="mobile-config" />
        </command>
        <command name="enable-encryption">
            <documentation>
                Encrypted product config encryption by generating a master key which
            </documentation>
        </command>
        <command name="encrypt-product-config">
            <documentation>
                Encrypt product config
            </documentation>
            <arg name="input" default="product.config.json" />
            <arg name="output" default="product.config.json.encrypted" />
        </command>
        <command name="decrypt-product-config">
            <documentation>
                Decrypt product config
            </documentation>
            <arg name="input" default="product.config.json.encrypted" />
            <arg name="output" default="product.config.json" />
        </command>
        <command name="wrap-css">
            <documentation>
                Wrap a CSS file in a rx.html script to be picked up during build
            </documentation>
            <arg name="input" default="style.css" />
            <arg name="output" default="css.rx.html" />
        </command>
        <command name="push-generate">
            <documentation>
                Generate VAPID tokens for a devbox.
            </documentation>
        </command>
    </group>

    <command name="kickstart" interactive="true">
        <documentation>
            Kickstart a project via an interactive process!
        </documentation>
    </command>

    <command name="init" interactive="true">
        <documentation>
            Initializes the config with a valid token
        </documentation>
    </command>

    <command name="deinit" interactive="true">
        <documentation>
            Destroy your account. This requires you to delete all spaces, documents, authorities, and domains.
        </documentation>
    </command>

    <group name="services" alt-name="service">
        <documentation>
            Launch a service
        </documentation>
        <command name="auto">
            <documentation>
                The config will decide the role
            </documentation>
        </command>
        <command name="prepare">
            <documentation>
                Run code that signals a deployment is coming
            </documentation>
        </command>
        <command name="backend">
            <documentation>
                Spin up a Adama back-end node
            </documentation>
        </command>
        <command name="frontend">
            <documentation>
                Spin up a WebSocket front-end node
            </documentation>
        </command>
        <command name="overlord">
            <documentation>
                Spin up the cluster overlord
            </documentation>
        </command>
        <command name="solo">
            <documentation>
                Spin up a solo machine
            </documentation>
        </command>
        <command name="dashboards">
            <documentation>
                Produce dashboards for prometheus.
            </documentation>
        </command>
        <command name="probe">
            <documentation>
                Connect to the local Adama instance
            </documentation>
            <arg name="target" default="127.0.0.1:8001" />
        </command>
    </group>

    <command name="dumpenv">
        <documentation>
            Dump your environment variables
        </documentation>
    </command>

    <command name="version">
        <documentation>
            Dump the current Adama version
        </documentation>
    </command>

    <command name="canary">
        <arg name="scenario" />
        <documentation>
            Run an E2E test suite against production
        </documentation>
    </command>

    <command name="devbox">
        <documentation>
            Host the working directory as a personal localhost instance
        </documentation>
        <arg name="rxhtml-path" default="frontend" />
        <arg name="asset-path" default="assets" />
        <arg name="microverse" default="local.verse.json" />
        <arg name="debugger" default="true" />
        <arg name="local-libadama-path" default="null" />
        <arg name="environment" default="test" />
        <arg name="preserve-view" default="true" />
        <arg name="types" default="types" />
        <arg name="language-port" default="2423"/>
    </command>

</cli>

